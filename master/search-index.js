var N = null;var searchIndex = {};
searchIndex["astral"]={"doc":"","items":[[0,"collections","astral::core","Collection types.",N,N],[0,"slot_map","astral::core::collections","Container with persistent unique keys.",N,N],[3,"Key","astral::core::collections::slot_map","Used to access stored values in a slot map.",N,N],[3,"SparseSlotMap","","A storage with stable unique keys.",N,N],[0,"error","astral::core","Traits and structures for working with Errors in the…",N,N],[3,"Error","astral::core::error","The generic error type for the Astral engine.",N,N],[8,"OptionExt","","Extension methods for [`Option`].",N,N],[10,"ok_or_error","","Transforms the [`Option<T>`] into a [`Result<T,…",0,[[["self"],["kind"],["context"]],["result",["error"]]]],[10,"ok_or_error_with","","Transforms the [`Option<T>`] into a [`Result<T,…",0,[[["self"],["kind"],["f"]],["result",["error"]]]],[8,"ResultExt","","Extension methods for [`Result`].",N,N],[10,"context","","Associates the error with an error kind.",1,[[["self"],["kind"]],["result",["error"]]]],[10,"chain","","Creates a new [`Error`], associates it with an error kind…",1,[[["self"],["kind"],["source"]],["result",["error"]]]],[10,"chain_with","","Creates a new [`Error`], associates it with an error kind…",1,[[["self"],["kind"],["f"]],["result",["error"]]]],[6,"Result","","A specialized [`Result`] type in the Astral Engine.",N,N],[0,"hash","astral::core","Hashing utilities and hashers.",N,N],[3,"Murmur3","astral::core::hash","An implementation of the [Murmur3 Hash].",N,N],[3,"NopHasher","","An implementation of [`Hasher`] hasher which only accepts…",N,N],[0,"math","astral::core","Traits, structures and functions for mathematical and…",N,N],[0,"num","astral::core::math","Additional functionality for numerics.",N,N],[8,"Zero","astral::core::math::num","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",3,[[["self"],["self"]],["self"]]],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",4,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",4,[[],["self"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",5,[[["t"]],["option"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",6,[[["self"]],["bool"]]],[8,"PrimUnsignedInt","","Functions for primitive unsigned integral types.",N,N],[16,"NonZero","","The [`NonZero`] part for this type.",7,N],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",8,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",8,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",9,[[["self"],["self"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",10,[[["self"],["u32"]],["self"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr","","",11,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",11,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NonZero","","Functions for primitive type, which has a non-zero…",N,N],[16,"Int","","The primitive unsigned int correspondant.",12,N],[10,"new_unchecked","","Create a non-zero without checking the value.",12,N],[10,"new","","Create a non-zero if the given value is not zero.",12,N],[10,"get","","Returns the value as the primitive type.",12,N],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of…",13,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",13,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",13,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",13,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",13,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",13,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",13,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",13,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",13,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",13,[[["self"],["u32"]],["self"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",14,[[["self"]],["t"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",15,[[["self"],["u32"]],["self"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",16,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs","","Computes the absolute value.",17,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",17,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[["self"]],["bool"]]],[0,"string","astral::core","Structures for holding strings.",N,N],[3,"Utf16Error","astral::core::string","A possible error value when converting a [`Name`] or…",N,N],[3,"Subsystem","","Manages optimized string allocation.",N,N],[17,"MAX_STRING_LENGTH","","The maximum length of one string like  [`Text`] or [`Name`].",N,N],[3,"Text","","A UTF-8 encoded, immutable string.",N,N],[3,"StringId","","An opaque struct for fast comparison between strings.",N,N],[3,"Name","","A UTF-8 encoded, immutable string optimized for numeric…",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",N,N],[3,"String","","A UTF-8 encoded, growable string.",N,N],[3,"System","astral::core","Core system for the Astral Engine.",N,N],[0,"third_party","astral","Facade for third party libraries.",N,N],[0,"bounds","astral::third_party::num_traits","",N,N],[8,"Bounded","astral::third_party::num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",4,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",4,[[],["self"]]],[0,"cast","astral::third_party::num_traits","",N,N],[8,"ToPrimitive","astral::third_party::num_traits::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this…",19,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",19,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",19,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",19,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",19,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",19,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",19,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",19,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",19,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",19,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",19,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",19,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",19,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",19,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",5,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",14,[[["self"]],["t"]]],[0,"float","astral::third_party::num_traits","",N,N],[8,"FloatCore","astral::third_party::num_traits::float","Generic trait for floating point numbers that works with…",N,N],[10,"infinity","","Returns positive infinity.",20,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",20,[[],["self"]]],[10,"nan","","Returns NaN.",20,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",20,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",20,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",20,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",20,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",20,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",20,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",20,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",20,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",20,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",20,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",20,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",20,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",20,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",20,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",20,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",20,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",20,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",20,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",20,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",20,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",20,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",20,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",20,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",20,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",20,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",20,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",21,[[],["self"]]],[10,"infinity","","Returns the infinite value.",21,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",21,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",21,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",21,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",21,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",21,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",21,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",21,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",21,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",21,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",21,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",21,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",21,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",21,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",21,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",21,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",21,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",21,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",21,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",21,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",21,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",21,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",21,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",21,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",21,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",21,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",21,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",21,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",21,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",21,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",21,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",21,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",21,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",21,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",21,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",21,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",21,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",21,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",21,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",21,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",21,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",21,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",21,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",21,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",21,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",21,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",21,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",21,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",21,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",21,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",21,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",21,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",21,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",21,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",21,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",21,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",22,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",22,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",22,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",22,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",22,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",22,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",22,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",22,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",22,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",22,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",22,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",22,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",22,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",22,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",22,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",22,[[],["self"]]],[0,"identities","astral::third_party::num_traits","",N,N],[8,"Zero","astral::third_party::num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",6,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","astral::third_party::num_traits","",N,N],[8,"PrimInt","astral::third_party::num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of…",13,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",13,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",13,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",13,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",13,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",13,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",13,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",13,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",13,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",13,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",13,[[["self"],["u32"]],["self"]]],[0,"ops","astral::third_party::num_traits","",N,N],[0,"checked","astral::third_party::num_traits::ops","",N,N],[8,"CheckedAdd","astral::third_party::num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",23,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",24,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",25,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",26,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",27,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",28,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",29,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",30,[[["self"],["u32"]],["option"]]],[0,"inv","astral::third_party::num_traits::ops","",N,N],[8,"Inv","astral::third_party::num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",N,N],[16,"Output","","The result after applying the operator.",31,N],[10,"inv","","Returns the multiplicative inverse of `self`.",31,N],[0,"mul_add","astral::third_party::num_traits::ops","",N,N],[8,"MulAdd","astral::third_party::num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",32,N],[10,"mul_add","","Performs the fused multiply-add operation.",32,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,N],[0,"saturating","astral::third_party::num_traits::ops","",N,N],[8,"Saturating","astral::third_party::num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",8,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",8,[[["self"],["self"]],["self"]]],[0,"wrapping","astral::third_party::num_traits::ops","",N,N],[8,"WrappingAdd","astral::third_party::num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",16,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",3,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",9,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",15,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",10,[[["self"],["u32"]],["self"]]],[0,"pow","astral::third_party::num_traits","",N,N],[8,"Pow","astral::third_party::num_traits::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",34,N],[10,"pow","","Returns `self` to the power `rhs`.",34,N],[5,"pow","","Raises a value to the power of exp, using exponentiation…",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",N,[[["t"],["usize"]],["option"]]],[0,"real","astral::third_party::num_traits","",N,N],[8,"Real","astral::third_party::num_traits::real","A trait for real number types that do not necessarily have…",N,N],[10,"min_value","","Returns the smallest finite value that this type can…",35,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",35,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",35,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",35,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",35,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",35,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",35,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",35,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",35,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",35,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",35,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",35,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",35,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",35,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",35,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",35,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",35,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",35,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",35,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",35,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",35,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",35,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",35,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",35,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",35,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",35,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",35,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",35,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",35,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",35,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",35,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",35,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",35,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",35,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",35,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",35,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",35,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",35,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",35,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",35,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",35,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",35,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",35,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",35,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",35,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",35,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",35,[[["self"]],["self"]]],[0,"sign","astral::third_party::num_traits","",N,N],[8,"Signed","astral::third_party::num_traits::sign","Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs","","Computes the absolute value.",17,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",17,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","astral::third_party::num_traits","The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr","","",11,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",11,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric…",N,N],[8,"RefNum","","The trait for references which implement numeric…",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",36,N],[13,"Invalid","","",36,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",37,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[6,"Result","astral::third_party::walkdir","A result type for walkdir operations.",N,N],[3,"WalkDir","","A builder to create an iterator for recursively walking a…",N,N],[3,"IntoIter","","An iterator for recursively descending into a directory.",N,N],[3,"DirEntry","","A directory entry.",N,N],[3,"FilterEntry","","A recursive directory iterator that skips entries.",N,N],[3,"Error","","An error produced by recursively walking a directory.",N,N],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",N,N],[10,"ino","","Returns the underlying `d_ino` field in the contained…",38,[[["self"]],["u64"]]],[3,"Logger","astral::third_party::slog","Logging handle used to execute logging statements",N,N],[8,"Drain","","Logging drain",N,N],[16,"Ok","","Type returned by this drain",39,N],[16,"Err","","Type of potential errors that can be returned by this…",39,N],[10,"log","","Handle one logging statement (`Record`)",39,[[["self"],["record"],["ownedkvlist"]],["result"]]],[11,"is_enabled","","Avoid: Check if messages at the specified log level are…",39,[[["self"],["level"]],["bool"]]],[11,"is_critical_enabled","","Avoid: See `is_enabled`",39,[[["self"]],["bool"]]],[11,"is_error_enabled","","Avoid: See `is_enabled`",39,[[["self"]],["bool"]]],[11,"is_warning_enabled","","Avoid: See `is_enabled`",39,[[["self"]],["bool"]]],[11,"is_info_enabled","","Avoid: See `is_enabled`",39,[[["self"]],["bool"]]],[11,"is_debug_enabled","","Avoid: See `is_enabled`",39,[[["self"]],["bool"]]],[11,"is_trace_enabled","","Avoid: See `is_enabled`",39,[[["self"]],["bool"]]],[11,"map","","Pass `Drain` through a closure, eg. to wrap into another…",39,[[["self"],["f"]],["r"]]],[11,"filter","","Filter logging records passed to `Drain`",39,[[["self"],["f"]],["filter"]]],[11,"filter_level","","Filter logging records passed to `Drain` (by level)",39,[[["self"],["level"]],["levelfilter"]]],[11,"map_err","","Map logging errors returned by this drain",39,[[["self"],["f"]],["maperror"]]],[11,"ignore_res","","Ignore results returned by this drain",39,[[["self"]],["ignoreresult"]]],[11,"fuse","","Make `Self` panic when returning any errors",39,[[["self"]],["fuse"]]],[8,"SendSyncUnwindSafe","","`Send + Sync + UnwindSafe` bound",N,N],[8,"SendSyncUnwindSafeDrain","","`Drain + Send + Sync + UnwindSafe` bound",N,N],[8,"SendSyncRefUnwindSafeDrain","","`Drain + Send + Sync + RefUnwindSafe` bound",N,N],[8,"MapErrFn","","Function that can be used in `MapErr` drain",N,N],[8,"FilterFn","","Function that can be used in `Filter` drain",N,N],[8,"SendRefUnwindSafeDrain","","`Drain + Send + RefUnwindSafe` bound",N,N],[3,"Discard","","`Drain` discarding everything",N,N],[3,"Filter","","`Drain` filtering records",N,N],[12,"0","","",40,N],[12,"1","","",40,N],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",N,N],[12,"0","","",41,N],[12,"1","","",41,N],[3,"MapError","","`Drain` mapping error returned by another `Drain`",N,N],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",N,N],[12,"0","","",42,N],[12,"1","","",42,N],[3,"Fuse","","`Drain` panicking on error",N,N],[12,"0","","",43,N],[3,"IgnoreResult","","`Drain` ignoring result",N,N],[4,"MutexDrainError","","Error returned by `Mutex<D : Drain>`",N,N],[13,"Mutex","","Error acquiring mutex",44,N],[13,"Drain","","Error returned by drain",44,N],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level…",N,N],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short…",N,N],[4,"Level","","Logging level associated with a logging `Record`",N,N],[13,"Critical","","Critical",45,N],[13,"Error","","Error",45,N],[13,"Warning","","Warning",45,N],[13,"Info","","Info",45,N],[13,"Debug","","Debug",45,N],[13,"Trace","","Trace",45,N],[4,"FilterLevel","","Logging filtering level",N,N],[13,"Off","","Log nothing",46,N],[13,"Critical","","Log critical level only",46,N],[13,"Error","","Log only error level and above",46,N],[13,"Warning","","Log only warning level and above",46,N],[13,"Info","","Log only info level and above",46,N],[13,"Debug","","Log only debug level and above",46,N],[13,"Trace","","Log everything",46,N],[3,"RecordStatic","","Information that can be static in the given record thus…",N,N],[3,"Record","","One logging record",N,N],[8,"Serializer","","Serializer",N,N],[11,"emit_usize","","Emit `usize`",47,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"emit_isize","","Emit `isize`",47,[[["self"],["str"],["isize"]],["result",["error"]]]],[11,"emit_bool","","Emit `bool`",47,[[["self"],["str"],["bool"]],["result",["error"]]]],[11,"emit_char","","Emit `char`",47,[[["self"],["str"],["char"]],["result",["error"]]]],[11,"emit_u8","","Emit `u8`",47,[[["self"],["str"],["u8"]],["result",["error"]]]],[11,"emit_i8","","Emit `i8`",47,[[["self"],["str"],["i8"]],["result",["error"]]]],[11,"emit_u16","","Emit `u16`",47,[[["self"],["str"],["u16"]],["result",["error"]]]],[11,"emit_i16","","Emit `i16`",47,[[["self"],["str"],["i16"]],["result",["error"]]]],[11,"emit_u32","","Emit `u32`",47,[[["self"],["str"],["u32"]],["result",["error"]]]],[11,"emit_i32","","Emit `i32`",47,[[["self"],["str"],["i32"]],["result",["error"]]]],[11,"emit_f32","","Emit `f32`",47,[[["self"],["str"],["f32"]],["result",["error"]]]],[11,"emit_u64","","Emit `u64`",47,[[["self"],["str"],["u64"]],["result",["error"]]]],[11,"emit_i64","","Emit `i64`",47,[[["self"],["str"],["i64"]],["result",["error"]]]],[11,"emit_f64","","Emit `f64`",47,[[["self"],["str"],["f64"]],["result",["error"]]]],[11,"emit_u128","","Emit `u128`",47,[[["self"],["str"],["u128"]],["result",["error"]]]],[11,"emit_i128","","Emit `i128`",47,[[["self"],["str"],["i128"]],["result",["error"]]]],[11,"emit_str","","Emit `&str`",47,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"emit_unit","","Emit `()`",47,[[["self"],["str"]],["result",["error"]]]],[11,"emit_none","","Emit `None`",47,[[["self"],["str"]],["result",["error"]]]],[10,"emit_arguments","","Emit `fmt::Arguments`",47,[[["self"],["str"],["arguments"]],["result",["error"]]]],[8,"Value","","Value that can be serialized",N,N],[10,"serialize","","Serialize self into `Serializer`",48,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[3,"FnValue","","Explicit lazy-closure `Value`",N,N],[12,"0","","",49,N],[6,"PushFnSerializer","","Old name of `PushFnValueSerializer`",N,N],[3,"PushFnValueSerializer","","Handle passed to `PushFnValue` closure",N,N],[3,"PushFnValue","","Lazy `Value` that writes to Serializer",N,N],[12,"0","","",50,N],[8,"KV","","Key-value pair(s) for log events",N,N],[10,"serialize","","Serialize self into `Serializer`",51,[[["self"],["record"],["serializer"]],["result",["error"]]]],[8,"SendSyncRefUnwindSafeKV","","Thread-local safety bound for `KV`",N,N],[3,"SingleKV","","Single pair `Key` and `Value`",N,N],[12,"0","","",52,N],[12,"1","","",52,N],[3,"OwnedKV","","Owned KV",N,N],[3,"BorrowedKV","","Borrowed `KV`",N,N],[3,"OwnedKVList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its…",N,N],[4,"Error","","Serialization Error",N,N],[13,"Io","","`io::Error` (not available in ![no_std] mode)",53,N],[13,"Fmt","","`fmt::Error`",53,N],[13,"Other","","Other error",53,N],[6,"Result","","Serialization `Result`",N,N],[6,"Serialize","","Compatibility name to ease upgrading from `slog v1`",N,N],[6,"PushLazy","","Compatibility name to ease upgrading from `slog v1`",N,N],[6,"ValueSerializer","","Compatibility name to ease upgrading from `slog v1`",N,N],[6,"OwnedKeyValueList","","Compatibility name to ease upgrading from `slog v1`",N,N],[0,"ser","","Compatibility name to ease upgrading from `slog v1`",N,N],[14,"info","","Log info level record",N,N],[14,"slog_b","","Alias of `b`",N,N],[14,"slog_record_static","","Create `RecordStatic` at the given code location (alias)",N,N],[14,"trace","","Log trace level record",N,N],[14,"kv","","Macro for build `KV` implementing type",N,N],[14,"slog_trace","","Log trace level record (alias)",N,N],[14,"error","","Log error level record",N,N],[14,"slog_error","","Log error level record",N,N],[14,"crit","","Log critical level record",N,N],[14,"debug","","Log debug level record",N,N],[14,"slog_debug","","Log debug level record (alias)",N,N],[14,"log","","Log message a logging record",N,N],[14,"record","","Create `Record` at the given code location",N,N],[14,"o","","Macro for building group of key-value pairs: `OwnedKV`",N,N],[14,"warn","","Log warning level record",N,N],[14,"slog_warn","","Log warning level record (alias)",N,N],[14,"slog_crit","","Log critical level record (alias)",N,N],[6,"Key","","Key type",N,N],[14,"slog_record","","Create `Record` at the given code location (alias)",N,N],[14,"b","","Macro for building group of key-value pairs in `BorrowedKV`",N,N],[14,"slog_log","","Log message a logging record (alias)",N,N],[14,"slog_kv","","Alias of `kv`",N,N],[14,"slog_info","","Log info level record (alias)",N,N],[14,"slog_o","","Macro for building group of key-value pairs (alias)",N,N],[14,"record_static","","Create `RecordStatic` at the given code location",N,N],[0,"de","astral::third_party::serde","Generic data structure deserialization framework.",N,N],[0,"value","astral::third_party::serde::de","Building blocks for deserializing basic values using the…",N,N],[3,"Error","astral::third_party::serde::de::value","A minimal representation of all possible errors that can…",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[8,"Error","astral::third_party::serde::de","The `Error` trait allows `Deserialize` implementations to…",N,N],[10,"custom","","Raised when there is general error when deserializing a…",54,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",54,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",54,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",54,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",54,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",54,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",54,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",54,[[["str"]],["self"]]],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",55,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",55,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",55,N],[13,"Float","","The input contained a floating point `f32` or `f64` that…",55,N],[13,"Char","","The input contained a `char` that was not expected.",55,N],[13,"Str","","The input contained a `&str` or `String` that was not…",55,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",55,N],[13,"Unit","","The input contained a unit `()` that was not expected.",55,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",55,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",55,N],[13,"Seq","","The input contained a sequence that was not expected.",55,N],[13,"Map","","The input contained a map that was not expected.",55,N],[13,"Enum","","The input contained an enum that was not expected.",55,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",55,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",55,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",55,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",55,N],[13,"Other","","A message stating what uncategorized thing the input…",55,N],[8,"Expected","","`Expected` represents an explanation of what data a…",N,N],[10,"fmt","","Format an explanation of what data was being expected.…",56,[[["self"],["formatter"]],["result",["error"]]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",57,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",N,N],[16,"Value","","The type produced by using this seed.",58,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",58,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",N,N],[16,"Error","","The error type that can be returned if some error occurs…",59,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",59,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",59,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",59,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",59,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",59,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",59,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",59,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",59,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",59,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",59,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",59,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",59,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a…",N,N],[16,"Value","","The value produced by this visitor.",60,N],[10,"expecting","","Format a message stating what data this Visitor expects to…",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"visit_bool","","The input contains a boolean.",60,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",60,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",60,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",60,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",60,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",60,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",60,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",60,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",60,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",60,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",60,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",60,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",60,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",60,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",60,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",60,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is…",60,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",60,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",60,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",60,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",60,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",60,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",60,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",60,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",60,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",60,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",60,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",N,N],[16,"Error","","The error type that can be returned if some error occurs…",61,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",61,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",61,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",61,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",N,N],[16,"Error","","The error type that can be returned if some error occurs…",62,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",62,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",62,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",62,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",62,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",62,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",62,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",62,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",N,N],[16,"Error","","The error type that can be returned if some error occurs…",63,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",63,N],[10,"variant_seed","","`variant` is called to identify which variant to…",63,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to…",63,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",N,N],[16,"Error","","The error type that can be returned if some error occurs…",64,N],[10,"unit_variant","","Called when deserializing a variant with no values.",64,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",64,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",64,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",64,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",64,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",65,N],[10,"into_deserializer","","Convert this value into a deserializer.",65,N],[3,"IgnoredAny","","An efficient way of discarding data from a deserializer.",N,N],[0,"ser","astral::third_party::serde","Generic data structure serialization framework.",N,N],[8,"Error","astral::third_party::serde::ser","Trait used by `Serialize` implementations to generically…",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any…",66,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data…",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",67,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",N,N],[16,"Ok","","The output type produced by this `Serializer` during…",68,N],[16,"Error","","The error type when some error occurs during serialization.",68,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",68,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",68,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",68,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",68,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",68,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",68,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",68,N],[10,"serialize_bool","","Serialize a `bool` value.",68,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",68,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",68,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",68,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",68,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",68,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",68,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",68,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",68,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",68,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",68,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",68,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",68,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",68,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",68,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",68,N],[10,"serialize_none","","Serialize a [`None`] value.",68,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",68,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",68,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",68,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",68,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",68,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",68,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",68,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",68,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",68,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",68,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",68,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",68,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",68,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",68,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",68,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",68,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",68,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",69,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",69,N],[10,"serialize_element","","Serialize a sequence element.",69,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",69,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",70,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",70,N],[10,"serialize_element","","Serialize a tuple element.",70,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",70,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",71,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",71,N],[10,"serialize_field","","Serialize a tuple struct field.",71,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",71,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",72,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",72,N],[10,"serialize_field","","Serialize a tuple variant field.",72,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",72,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",73,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",73,N],[10,"serialize_key","","Serialize a map key.",73,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",73,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",73,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",73,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",74,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",74,N],[10,"serialize_field","","Serialize a struct field.",74,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",74,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",74,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",75,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",75,N],[10,"serialize_field","","Serialize a struct variant field.",75,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",75,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",75,[[["self"]],["result"]]],[3,"Impossible","","Helper type for implementing a `Serializer` that does not…",N,N],[14,"forward_to_deserialize_any","astral::third_party::serde","Helper macro when implementing the `Deserializer` part of…",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is…",N,N],[8,"LazyStatic","astral::third_party::lazy_static","Support trait for enabling a few common operation on lazy…",N,N],[5,"initialize","","Takes a shared reference to a lazy static and initializes…",N,N],[8,"__Deref","","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",76,N],[10,"deref","","Dereferences the value.",76,N],[14,"lazy_static","","",N,N],[3,"Engine","astral","The main object for handling systems in the Astral Engine.",N,N],[0,"assets","astral::resource","Functionality to manage asset data.",N,N],[3,"Namespace","astral::resource::assets","A `Namespace` contains multiple, various…",N,N],[3,"FileSystem","","A `FileSystem` is a view into the systems file system.",N,N],[4,"ErrorKind","","A list specifying general categories of assets error.",N,N],[13,"Io","","An I/O operation failed.",77,N],[13,"InvalidIndex","","The passed index is not valid.",77,N],[13,"Other","","Any assets error not part of this list.",77,N],[3,"Subsystem","","",N,N],[3,"VirtualFileSystemIndex","","An index to access a [`VirtualFileSystem`] inside of a…",N,N],[8,"VirtualFileSystem","","A virtual file system is an abstraction to a concrete file…",N,N],[10,"name","","Returns the [`Name`] of the file system.",78,[[["self"]],["name"]]],[10,"readonly","","Returns if the file system is read-only.",78,[[["self"]],["bool"]]],[10,"iter","","Returns an [`Iterator`] over all files in the file system.",78,[[["self"]],["result",["box","error"]]]],[10,"create","","Opens a file in write-only mode.",78,[[["self"],["name"]],["result",["box","error"]]]],[10,"create_new","","Creates a file in write-only mode.",78,[[["self"],["name"]],["result",["box","error"]]]],[10,"exists","","Returns whether the path points at an existing entity.",78,[[["self"],["name"]],["bool"]]],[10,"modified","","Returns the last modification time at this entity.",78,[[["self"],["name"]],["result",["systemtime","error"]]]],[10,"open","","Attempts to open a file in read-only mode.",78,[[["self"],["name"]],["result",["box","error"]]]],[10,"remove","","Removes a file from the filesystem.",78,[[["self"],["name"]],["result",["error"]]]],[3,"Catalog","","A collection of [`Namespace`]s.",N,N],[6,"Result","","The type returned from asset methods.",N,N],[6,"Error","","A specialized Error type with an asset [`ErrorKind`].",N,N],[3,"NamespaceId","","An index to access a [`Namespace`] inside of a [`Catalog`].",N,N],[3,"Location","","A `Location` consists of a [`NamespaceId`] and a [`Name`].",N,N],[12,"namespace_id","","",79,N],[12,"name","","",79,N],[4,"ErrorKind","astral::resource","A list specifying general categories of resource error.",N,N],[13,"Loading","","A resource could not be loaded.",80,N],[6,"Result","","",N,N],[6,"Error","","",N,N],[6,"LoadPriority","","",N,N],[3,"System","","",N,N],[8,"LoadData","","",N,N],[3,"Declaration","","",N,N],[8,"Resource","","",N,N],[16,"LoadData","","",81,N],[3,"System","astral::video","",N,N],[11,"to_owned","astral::core::collections::slot_map","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into_iter","","",83,[[["self"]],["i"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"to_string","astral::core::error","",84,[[["self"]],["string"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"to_owned","astral::core::hash","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"to_string","astral::core::string","",87,[[["self"]],["string"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"to_string","","",89,[[["self"]],["string"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"to_string","","",91,[[["self"]],["string"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"to_string","","",92,[[["self"]],["string"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"to_string","","",93,[[["self"]],["string"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"from","astral::core","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"from","astral::third_party::num_traits","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into_iter","astral::third_party::walkdir","",95,[[["self"]],["i"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into_iter","","",96,[[["self"]],["i"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into_iter","","",98,[[["self"]],["i"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"to_string","","",99,[[["self"]],["string"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"to_owned","astral::third_party::slog","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"to_owned","astral::third_party::serde::de::value","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"to_string","","",110,[[["self"]],["string"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"to_owned","astral::third_party::serde::de","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","astral::third_party::serde::ser","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"from","astral","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"from","astral::resource::assets","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"to_owned","astral::resource","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"from","astral::video","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"as_ref","astral::core::string","",93,[[["self"]],["osstr"]]],[11,"as_ref","","",93,[[["self"]],["path"]]],[11,"to_socket_addrs","","",93,[[["self"]],["result",["intoiter","error"]]]],[11,"add","","",93,[[["self"],["str"]],["string"]]],[11,"from_iter","","",93,[[["i"]],["string"]]],[11,"from_iter","","",93,[[["i"]],["string"]]],[11,"from_iter","","",93,[[["i"]],["string"]]],[11,"from_iter","","",93,[[["i"]],["string"]]],[11,"from_iter","","",93,[[["i"]],["string"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",93,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",93,[[["self"],["string"]],["bool"]]],[11,"le","","",93,[[["self"],["string"]],["bool"]]],[11,"gt","","",93,[[["self"],["string"]],["bool"]]],[11,"ge","","",93,[[["self"],["string"]],["bool"]]],[11,"deref_mut","","",93,[[["self"]],["str"]]],[11,"write_str","","",93,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",93,[[["self"],["char"]],["result",["error"]]]],[11,"default","","Creates an empty `String`.",93,[[],["string"]]],[11,"from_str","","",93,[[["str"]],["result",["string","parseerror"]]]],[11,"borrow","","",93,[[["self"]],["str"]]],[11,"index_mut","","",93,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index_mut","","",93,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","","",93,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",93,[[["self"],["range",["usize"]]],["str"]]],[11,"index_mut","","",93,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",93,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"cmp","","",93,[[["self"],["string"]],["ordering"]]],[11,"clone","","",93,[[["self"]],["string"]]],[11,"clone_from","","",93,N],[11,"add_assign","","",93,N],[11,"from","","Converts the given boxed `str` slice to a `String`. It is…",93,[[["box",["str"]]],["string"]]],[11,"from","","",93,[[["cow",["str"]]],["string"]]],[11,"from","","",93,[[["str"]],["string"]]],[11,"as_ref","","",93,N],[11,"as_ref","","",93,[[["self"]],["str"]]],[11,"to_string","","",93,[[["self"]],["string"]]],[11,"extend","","",93,N],[11,"extend","","",93,N],[11,"extend","","",93,N],[11,"extend","","",93,N],[11,"extend","","",93,N],[11,"eq","","",93,[[["self"],["str"]],["bool"]]],[11,"ne","","",93,[[["self"],["str"]],["bool"]]],[11,"eq","","",93,[[["self"],["str"]],["bool"]]],[11,"ne","","",93,[[["self"],["str"]],["bool"]]],[11,"eq","","",93,[[["self"],["string"]],["bool"]]],[11,"ne","","",93,[[["self"],["string"]],["bool"]]],[11,"eq","","",93,[[["self"],["cow"]],["bool"]]],[11,"ne","","",93,[[["self"],["cow"]],["bool"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"index","","",93,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","","",93,[[["self"],["rangefull"]],["str"]]],[11,"index","","",93,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",93,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",93,[[["self"],["range",["usize"]]],["str"]]],[11,"index","","",93,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"hash","","",93,N],[11,"deref","","",93,[[["self"]],["str"]]],[11,"as_ref","","",89,[[["self"]],["str"]]],[11,"as_ref","","",89,N],[11,"as_ref","","",89,[[["self"]],["path"]]],[11,"as_ref","","",89,[[["self"]],["osstr"]]],[11,"source","astral::core::error","",84,[[["self"]],["option",["error"]]]],[11,"from","astral::core::string","",93,[[["name"]],["string"]]],[11,"from","astral::core::error","",84,[[["kind"]],["error"]]],[11,"from","astral::core::string","",91,[[["text"]],["name"]]],[11,"from","","",93,[[["text"]],["string"]]],[11,"partial_cmp","","",91,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",89,[[["self"],["cow"]],["option",["ordering"]]]],[11,"partial_cmp","","",89,[[["self"],["text"]],["option",["ordering"]]]],[11,"partial_cmp","","",89,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",89,[[["self"],["name"]],["option",["ordering"]]]],[11,"partial_cmp","","",89,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",91,[[["self"],["text"]],["option",["ordering"]]]],[11,"partial_cmp","","",93,[[["self"],["name"]],["option",["ordering"]]]],[11,"partial_cmp","","",91,[[["self"],["name"]],["option",["ordering"]]]],[11,"partial_cmp","","",91,[[["self"],["cow"]],["option",["ordering"]]]],[11,"partial_cmp","","",93,[[["self"],["text"]],["option",["ordering"]]]],[11,"partial_cmp","","",89,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",91,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",91,[[["self"],["str"]],["option",["ordering"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::collections::slot_map","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::string","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::collections::slot_map","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::error","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::string","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::hash","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"into_iter","astral::core::collections::slot_map","",83,N],[11,"clone","","",82,[[["self"]],["key"]]],[11,"clone","astral::core::hash","",85,[[["self"]],["murmur3"]]],[11,"clone","","",86,[[["self"]],["nophasher"]]],[11,"clone","astral::core::string","",89,[[["self"]],["text"]]],[11,"clone","","",90,[[["self"]],["stringid"]]],[11,"clone","","",92,[[["self"]],["utf8error"]]],[11,"clone","","",91,[[["self"]],["name"]]],[11,"index_mut","astral::core::collections::slot_map","",83,N],[11,"cmp","astral::core::string","",89,[[["self"],["text"]],["ordering"]]],[11,"cmp","","",91,[[["self"],["name"]],["ordering"]]],[11,"borrow","","",89,[[["self"]],["str"]]],[11,"deref","","",89,N],[11,"finish","astral::core::hash","",85,[[["self"]],["u64"]]],[11,"write","","",85,N],[11,"finish","","",86,[[["self"]],["u64"]]],[11,"write","","",86,N],[11,"write_u8","","",86,N],[11,"write_u16","","",86,N],[11,"write_u32","","",86,N],[11,"write_usize","","",86,N],[11,"write_i8","","",86,N],[11,"write_i16","","",86,N],[11,"write_i32","","",86,N],[11,"write_isize","","",86,N],[11,"hash","astral::core::string","",89,N],[11,"hash","","",90,N],[11,"hash","astral::core::collections::slot_map","",82,N],[11,"hash","astral::core::string","",91,N],[11,"drop","","",88,N],[11,"drop","astral::core","",94,N],[11,"index","astral::core::string","",89,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","","",89,[[["self"],["rangefull"]],["str"]]],[11,"index","","",89,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",89,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",89,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","","",89,[[["self"],["range",["usize"]]],["str"]]],[11,"index","astral::core::collections::slot_map","",83,N],[11,"default","astral::core::hash","",86,[[],["nophasher"]]],[11,"default","","",85,[[],["murmur3"]]],[11,"default","astral::core::collections::slot_map","",83,[[],["slotmap"]]],[11,"fmt","astral::core::string","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::error","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::string","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",91,[[["self"],["string"]],["bool"]]],[11,"eq","","",89,[[["self"],["string"]],["bool"]]],[11,"eq","","",89,[[["self"],["str"]],["bool"]]],[11,"eq","astral::core::collections::slot_map","",82,[[["self"],["key"]],["bool"]]],[11,"ne","","",82,[[["self"],["key"]],["bool"]]],[11,"eq","astral::core::string","",91,[[["self"],["str"]],["bool"]]],[11,"eq","","",89,[[["self"],["text"]],["bool"]]],[11,"eq","","",92,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",92,[[["self"],["utf8error"]],["bool"]]],[11,"eq","","",89,[[["self"],["cow"]],["bool"]]],[11,"eq","","",93,[[["self"],["name"]],["bool"]]],[11,"eq","","",89,[[["self"],["name"]],["bool"]]],[11,"eq","","",91,[[["self"],["text"]],["bool"]]],[11,"eq","","",93,[[["self"],["text"]],["bool"]]],[11,"eq","","",91,[[["self"],["cow"]],["bool"]]],[11,"eq","","",91,[[["self"],["str"]],["bool"]]],[11,"eq","","",91,[[["self"],["name"]],["bool"]]],[11,"eq","","",89,[[["self"],["str"]],["bool"]]],[11,"eq","","",90,[[["self"],["stringid"]],["bool"]]],[11,"ne","","",90,[[["self"],["stringid"]],["bool"]]],[11,"extend","","",93,N],[11,"extend","","",93,N],[11,"fmt","astral","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",139,N],[11,"fmt","astral::third_party::num_traits","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","astral::third_party::serde::de::value","",110,[[["self"]],["str"]]],[11,"custom","","",110,[[["t"]],["error"]]],[11,"serialize","astral::core::string","",93,[[["self"],["s"]],["result"]]],[11,"deserialize","astral::third_party::serde::de","",137,[[["d"]],["result",["ignoredany"]]]],[11,"deserialize","astral::core::string","",93,[[["d"]],["result",["string"]]]],[11,"deserialize_in_place","","",93,[[["d"],["string"]],["result"]]],[11,"custom","astral::third_party::serde::de::value","",110,[[["t"]],["error"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::third_party::serde::de","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::third_party::serde::de::value","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::third_party::serde::de","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize_field","astral::third_party::serde::ser","",138,[[["self"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"clone","astral::third_party::serde::de::value","",133,[[["self"]],["seqdeserializer"]]],[11,"clone","","",135,[[["self"]],["mapdeserializer"]]],[11,"clone","","",112,[[["self"]],["booldeserializer"]]],[11,"clone","","",131,[[["self"]],["cowstrdeserializer"]]],[11,"clone","","",125,[[["self"]],["i128deserializer"]]],[11,"clone","","",116,[[["self"]],["i64deserializer"]]],[11,"clone","","",136,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","","",119,[[["self"]],["u16deserializer"]]],[11,"clone","","",118,[[["self"]],["u8deserializer"]]],[11,"clone","","",134,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",117,[[["self"]],["isizedeserializer"]]],[11,"clone","astral::third_party::serde::de","",137,[[["self"]],["ignoredany"]]],[11,"clone","astral::third_party::serde::de::value","",115,[[["self"]],["i32deserializer"]]],[11,"clone","","",129,[[["self"]],["borrowedstrdeserializer"]]],[11,"clone","","",126,[[["self"]],["u128deserializer"]]],[11,"clone","","",113,[[["self"]],["i8deserializer"]]],[11,"clone","","",128,[[["self"]],["strdeserializer"]]],[11,"clone","","",130,[[["self"]],["stringdeserializer"]]],[11,"clone","","",132,[[["self"]],["borrowedbytesdeserializer"]]],[11,"clone","","",122,[[["self"]],["f32deserializer"]]],[11,"clone","astral::third_party::serde::de","",55,[[["self"]],["unexpected"]]],[11,"clone","astral::third_party::serde::de::value","",121,[[["self"]],["usizedeserializer"]]],[11,"clone","","",111,[[["self"]],["unitdeserializer"]]],[11,"clone","","",124,[[["self"]],["chardeserializer"]]],[11,"clone","","",110,[[["self"]],["error"]]],[11,"clone","","",114,[[["self"]],["i16deserializer"]]],[11,"clone","","",127,[[["self"]],["u32deserializer"]]],[11,"clone","","",120,[[["self"]],["u64deserializer"]]],[11,"clone","","",123,[[["self"]],["f64deserializer"]]],[11,"serialize_field","astral::third_party::serde::ser","",138,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"deserialize_bool","astral::third_party::serde::de::value","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",125,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",125,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",125,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",125,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",125,N],[11,"deserialize_enum","","",125,N],[11,"deserialize_identifier","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",125,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",117,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",117,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",117,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",117,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",117,N],[11,"deserialize_enum","","",117,N],[11,"deserialize_identifier","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",117,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",133,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",133,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",133,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",133,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",133,N],[11,"deserialize_enum","","",133,N],[11,"deserialize_identifier","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",133,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",126,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",126,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",126,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",126,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",126,N],[11,"deserialize_enum","","",126,N],[11,"deserialize_identifier","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",126,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",123,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",123,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",123,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",123,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",123,N],[11,"deserialize_enum","","",123,N],[11,"deserialize_identifier","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",123,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",130,N],[11,"deserialize_bool","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",130,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",130,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",130,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",130,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",130,N],[11,"deserialize_identifier","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",119,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",119,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",119,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",119,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",119,N],[11,"deserialize_enum","","",119,N],[11,"deserialize_identifier","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",119,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",120,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",120,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",120,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",120,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",120,N],[11,"deserialize_enum","","",120,N],[11,"deserialize_identifier","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",120,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",115,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",115,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",115,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",115,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",115,N],[11,"deserialize_enum","","",115,N],[11,"deserialize_identifier","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",115,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",113,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",113,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",113,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",113,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",113,N],[11,"deserialize_enum","","",113,N],[11,"deserialize_identifier","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",113,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",128,N],[11,"deserialize_bool","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",128,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",128,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",128,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",128,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",128,N],[11,"deserialize_identifier","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",128,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",132,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",132,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",132,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",132,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",132,N],[11,"deserialize_identifier","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",132,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",132,N],[11,"deserialize_bool","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",116,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",116,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",116,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",116,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",116,N],[11,"deserialize_enum","","",116,N],[11,"deserialize_identifier","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",116,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",118,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",118,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",118,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",118,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",118,N],[11,"deserialize_enum","","",118,N],[11,"deserialize_identifier","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",118,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",121,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",121,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",121,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",121,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",121,N],[11,"deserialize_enum","","",121,N],[11,"deserialize_identifier","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",121,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",131,N],[11,"deserialize_bool","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",131,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",131,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",131,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",131,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",131,N],[11,"deserialize_identifier","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",131,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",129,N],[11,"deserialize_bool","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",129,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",129,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",129,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",129,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",129,N],[11,"deserialize_identifier","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",129,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",135,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",135,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",135,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",135,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",135,N],[11,"deserialize_enum","","",135,N],[11,"deserialize_identifier","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",135,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",127,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",127,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",127,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",127,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",127,N],[11,"deserialize_identifier","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",127,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",127,N],[11,"deserialize_any","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",136,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",136,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",136,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",136,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",136,N],[11,"deserialize_enum","","",136,N],[11,"deserialize_identifier","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",136,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",124,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",124,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",124,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",124,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",124,N],[11,"deserialize_enum","","",124,N],[11,"deserialize_identifier","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",124,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",134,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",134,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",134,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",134,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",134,N],[11,"deserialize_enum","","",134,N],[11,"deserialize_identifier","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",134,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",111,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",111,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",111,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",111,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",111,N],[11,"deserialize_enum","","",111,N],[11,"deserialize_identifier","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",111,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",112,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",112,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",112,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",112,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",112,N],[11,"deserialize_enum","","",112,N],[11,"deserialize_identifier","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",112,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",122,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",122,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",122,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",122,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",122,N],[11,"deserialize_enum","","",122,N],[11,"deserialize_identifier","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",122,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",114,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",114,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",114,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",114,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",114,N],[11,"deserialize_enum","","",114,N],[11,"deserialize_identifier","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",114,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",114,[[["self"],["v"]],["result"]]],[11,"expecting","astral::third_party::serde::de","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"visit_bool","","",137,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",137,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",137,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",137,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",137,[[["self"],["str"]],["result"]]],[11,"visit_none","","",137,[[["self"]],["result"]]],[11,"visit_some","","",137,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",137,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",137,[[["self"]],["result"]]],[11,"visit_seq","","",137,[[["self"],["a"]],["result"]]],[11,"visit_map","","",137,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",137,N],[11,"serialize_field","astral::third_party::serde::ser","",138,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"next_element_seed","astral::third_party::serde::de::value","",133,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",133,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",135,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",135,[[["self"]],["option",["usize"]]]],[11,"serialize_field","astral::third_party::serde::ser","",138,[[["self"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"into_deserializer","astral::core::string","",93,[[["self"]],["stringdeserializer"]]],[11,"serialize_element","astral::third_party::serde::ser","",138,[[["self"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"variant_seed","astral::third_party::serde::de::value","",131,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",128,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",129,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",130,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",127,[[["self"],["t"]],["result"]]],[11,"default","astral::third_party::serde::de","",137,[[],["ignoredany"]]],[11,"serialize_key","astral::third_party::serde::ser","",138,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",138,[[["self"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"fmt","astral::third_party::serde::de::value","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::third_party::serde::de","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_key_seed","astral::third_party::serde::de::value","",135,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",135,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",135,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",135,[[["self"]],["option",["usize"]]]],[11,"eq","astral::third_party::serde::de","",55,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",55,[[["self"],["unexpected"]],["bool"]]],[11,"eq","astral::third_party::serde::de::value","",110,[[["self"],["error"]],["bool"]]],[11,"ne","","",110,[[["self"],["error"]],["bool"]]],[11,"serialize_element","astral::third_party::serde::ser","",138,[[["self"],["t"]],["result"]]],[11,"end","","",138,[[["self"]],["result"]]],[11,"fmt","astral::third_party::slog","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",45,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",46,[[["self"],["filterlevel"]],["ordering"]]],[11,"serialize","astral::core::string","",93,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[11,"serialize","astral::third_party::slog","",49,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[11,"serialize","","",50,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[11,"drop","","",106,N],[11,"clone","","",41,[[["self"]],["levelfilter"]]],[11,"clone","","",44,[[["self"]],["mutexdrainerror"]]],[11,"clone","","",42,[[["self"]],["duplicate"]]],[11,"clone","","",101,[[["self"]],["discard"]]],[11,"clone","","",103,[[["self"]],["ignoreresult"]]],[11,"clone","","",40,[[["self"]],["filter"]]],[11,"clone","","",46,[[["self"]],["filterlevel"]]],[11,"clone","","",43,[[["self"]],["fuse"]]],[11,"clone","","",100,[[["self"]],["logger"]]],[11,"clone","","",45,[[["self"]],["level"]]],[11,"clone","","",109,[[["self"]],["ownedkvlist"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",46,[[["str"]],["result",["filterlevel"]]]],[11,"from_str","","",45,[[["str"]],["result",["level"]]]],[11,"log","","",42,[[["self"],["record"],["ownedkvlist"]],["result"]]],[11,"is_enabled","","",42,[[["self"],["level"]],["bool"]]],[11,"log","","",43,[[["self"],["record"],["ownedkvlist"]],["result",["neverstruct"]]]],[11,"is_enabled","","",43,[[["self"],["level"]],["bool"]]],[11,"log","","",41,[[["self"],["record"],["ownedkvlist"]],["result"]]],[11,"is_enabled","","",41,[[["self"],["level"]],["bool"]]],[11,"log","","",40,[[["self"],["record"],["ownedkvlist"]],["result"]]],[11,"is_enabled","","",40,[[["self"],["level"]],["bool"]]],[11,"log","","",101,[[["self"],["record"],["ownedkvlist"]],["result",["neverstruct"]]]],[11,"is_enabled","","",101,[[["self"],["level"]],["bool"]]],[11,"log","","",100,[[["self"],["record"],["ownedkvlist"]],["result"]]],[11,"is_enabled","","",100,[[["self"],["level"]],["bool"]]],[11,"log","","",103,[[["self"],["record"],["ownedkvlist"]],["result",["neverstruct"]]]],[11,"is_enabled","","",103,[[["self"],["level"]],["bool"]]],[11,"log","","",102,[[["self"],["record"],["ownedkvlist"]],["result"]]],[11,"is_enabled","","",102,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["filterlevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",45,[[["self"],["level"]],["option",["ordering"]]]],[11,"description","","",44,[[["self"]],["str"]]],[11,"cause","","",44,[[["self"]],["option",["error"]]]],[11,"description","","",53,[[["self"]],["str"]]],[11,"cause","","",53,[[["self"]],["option",["error"]]]],[11,"from","","",52,N],[11,"from","","",53,[[["error"]],["error"]]],[11,"from","","",109,[[["ownedkv"]],["ownedkvlist"]]],[11,"from","","",44,[[["poisonerror",["mutexguard"]]],["mutexdrainerror"]]],[11,"from","","",53,[[["error"]],["error"]]],[11,"serialize","","",109,[[["self"],["record"],["serializer"]],["result",["error"]]]],[11,"serialize","","",52,[[["self"],["record"],["serializer"]],["result",["error"]]]],[11,"serialize","","",107,[[["self"],["record"],["serializer"]],["result",["error"]]]],[11,"serialize","","",108,[[["self"],["record"],["serializer"]],["result",["error"]]]],[11,"eq","","",45,[[["self"],["level"]],["bool"]]],[11,"eq","","",46,[[["self"],["filterlevel"]],["bool"]]],[11,"description","astral::third_party::walkdir","",99,[[["self"]],["str"]]],[11,"cause","","",99,[[["self"]],["option",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"into_iter","","",95,[[["self"]],["intoiter"]]],[11,"next","","Advances the iterator and returns the next value.",96,[[["self"]],["option",["result"]]]],[11,"next","","Advances the iterator and returns the next value.",98,[[["self"]],["option",["result"]]]],[11,"clone","","",97,[[["self"]],["direntry"]]],[11,"ino","","Returns the underlying `d_ino` field in the contained…",97,[[["self"]],["u64"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","astral::resource::assets","",77,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"partial_cmp","astral::resource","",80,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"hash","astral::resource::assets","",79,N],[11,"hash","","",143,N],[11,"hash","astral::resource","",80,N],[11,"hash","astral::resource::assets","",77,N],[11,"hash","","",145,N],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource::assets","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource::assets","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",146,N],[11,"drop","astral::resource::assets","",142,N],[11,"clone","","",143,[[["self"]],["virtualfilesystemindex"]]],[11,"clone","","",145,[[["self"]],["namespaceid"]]],[11,"clone","","",79,[[["self"]],["location"]]],[11,"clone","astral::resource","",80,[[["self"]],["errorkind"]]],[11,"clone","astral::resource::assets","",77,[[["self"]],["errorkind"]]],[11,"default","astral::resource","",147,[[],["declaration"]]],[11,"default","astral::resource::assets","",144,[[],["catalog",["buildhasherdefault"]]]],[11,"default","","",140,[[],["namespace",["buildhasherdefault"]]]],[11,"index","","",144,N],[11,"index_mut","","",144,N],[11,"cmp","astral::resource","",80,[[["self"],["errorkind"]],["ordering"]]],[11,"cmp","astral::resource::assets","",77,[[["self"],["errorkind"]],["ordering"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"name","astral::resource::assets","",141,[[["self"]],["name"]]],[11,"readonly","","",141,[[["self"]],["bool"]]],[11,"iter","","",141,[[["self"]],["result",["box","error"]]]],[11,"create","","",141,[[["self"],["name"]],["result",["box","error"]]]],[11,"create_new","","",141,[[["self"],["name"]],["result",["box","error"]]]],[11,"exists","","",141,[[["self"],["name"]],["bool"]]],[11,"modified","","",141,[[["self"],["name"]],["result",["systemtime","error"]]]],[11,"open","","",141,[[["self"],["name"]],["result",["box","error"]]]],[11,"remove","","",141,[[["self"],["name"]],["result",["error"]]]],[11,"eq","","",79,[[["self"],["location"]],["bool"]]],[11,"ne","","",79,[[["self"],["location"]],["bool"]]],[11,"eq","","",77,[[["self"],["errorkind"]],["bool"]]],[11,"eq","astral::resource","",80,[[["self"],["errorkind"]],["bool"]]],[11,"eq","astral::resource::assets","",143,[[["self"],["virtualfilesystemindex"]],["bool"]]],[11,"ne","","",143,[[["self"],["virtualfilesystemindex"]],["bool"]]],[11,"eq","","",145,[[["self"],["namespaceid"]],["bool"]]],[11,"ne","","",145,[[["self"],["namespaceid"]],["bool"]]],[11,"drop","astral::video","",148,N],[11,"new","astral::core::collections::slot_map","Construct a new, empty `SparseSlotMap`.",83,[[],["slotmap"]]],[11,"with_capacity","","Construct a new, empty `SparseSlotMap` with the specified…",83,[[["usize"]],["slotmap"]]],[11,"capacity","","Returns the number of elements the slot map can hold…",83,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",83,N],[11,"len","","Returns the number of elements in the slot map, also…",83,[[["self"]],["idx"]]],[11,"is_empty","","Returns `true` if the slot map contains no elements.",83,[[["self"]],["bool"]]],[11,"create_key","","Creates a new key which can be used later.",83,[[["self"]],["key"]]],[11,"contains_key","","Returns if a key is stored in the map.",83,[[["self"],["key"]],["bool"]]],[11,"insert","","Inserts a value into the map returning the key.",83,[[["self"],["t"]],["key"]]],[11,"insert_with_key","","Inserts a value at the given position. The key has to be…",83,[[["self"],["key"],["t"]],["result",["option"]]]],[11,"remove","","Removes the value at the given key",83,[[["self"],["key"]],["option"]]],[11,"clear","","Clears the slot map. Keeps the allocated memory for reuse.",83,N],[11,"retain","","Retains only the elements specified by the predicate.",83,N],[11,"get","","Returns a reference to the value corresponding to the key.",83,[[["self"],["key"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",83,[[["self"],["key"]],["option"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",83,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",83,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",83,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",83,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",83,[[["self"]],["valuesmut"]]],[11,"drain","","Creates a draining iterator that yields the removed items.",83,[[["self"]],["drain"]]],[11,"drain_filter","","Clears the slot map, returning all key-value pairs as an…",83,[[["self"],["f"]],["drainfilter"]]],[11,"new","astral::core::error","Creates a new error from a known kind of error as well as…",84,[[["kind"],["e"]],["error"]]],[11,"chained","","Creates a new error from a known kind of error as well as…",84,[[["kind"],["e"],["s"]],["error"]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this…",84,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by…",84,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",84,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `Kind` for this error.",84,[[["self"]],["kind"]]],[11,"new","astral::core::string","Initialize the string subsystem from the given [core…",88,[[["usize"],["system"]],["subsystem",["buildhasherdefault"]]]],[11,"with_hasher","","Initialize the string subsystem from the given [core…",88,[[["usize"],["system"],["h"]],["subsystem"]]],[11,"used_memory","","Returns the used memory.",88,[[["self"]],["usize"]]],[11,"allocations","","Returns the used memory chunks.",88,[[["self"]],["usize"]]],[11,"strings_allocated","","Returns the number of unique allocated strings.",88,[[["self"]],["usize"]]],[11,"average_string_length","","Returns the average string length.",88,[[["self"]],["usize"]]],[11,"logger","","Returns the logger of this string subsystem.",88,[[["self"]],["logger"]]],[11,"new","","Creates a `Text` from the given string literal in the…",89,[[["t"],["subsystem"]],["text"]]],[11,"from_utf8","","Converts a slice of bytes to a `Text`.",89,N],[11,"from_utf8_lossy","","Converts a slice of bytes to a `Text`, including invalid…",89,N],[11,"from_utf8_unchecked","","Converts a slice of bytes to a `Text` without checking…",89,N],[11,"from_utf16","","Decode a UTF-16 encoded slice into a `Text`, returning…",89,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice into a `Text`, replacing…",89,N],[11,"from_raw_parts","","Creates a `Text` directly from a [`StringId`] in the…",89,[[["stringid"],["subsystem"]],["text"]]],[11,"id","","Returns the underlying [`StringId`].",89,[[["self"]],["stringid"]]],[11,"as_str","","Extracts a string slice containing the entire `Text`.",89,[[["self"]],["str"]]],[11,"is_empty","","Returns `true` if this `Text` has a length of zero.",89,[[["self"]],["bool"]]],[11,"len","","Returns the length of this `Text`, in bytes.",89,[[["self"]],["usize"]]],[11,"new","","Construcs a new `StringId` from the given string in the…",90,[[["s"],["subsystem"]],["stringid"]]],[11,"new","","Creates a `Text` from the given string literal in the…",91,[[["t"],["subsystem"]],["name"]]],[11,"from_utf8","","Converts a slice of bytes to a `Name`.",91,N],[11,"from_utf8_lossy","","Converts a slice of bytes to a `Name`, including invalid…",91,N],[11,"from_utf8_unchecked","","Converts a slice of bytes to a `Name` without checking…",91,N],[11,"from_utf16","","Decode a UTF-16 encoded slice into a `Name`, returning…",91,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice into a `Name`, replacing…",91,N],[11,"from_raw_parts","","Creates a `Name` directly from a [`StringId`], and a…",91,[[["stringid"],["option",["nonzerou32"]],["subsystem"]],["name"]]],[11,"id","","Returns the underlying [`StringId`].",91,[[["self"]],["stringid"]]],[11,"string_part","","Returns the string part of the `Name`.",91,[[["self"]],["str"]]],[11,"number","","Returns the number part of the `Name`.",91,[[["self"]],["option",["nonzerou32"]]]],[11,"as_str","","Returns the string as [`Cow`]`<'static,`[`str`]`>`.",91,[[["self"]],["cow",["str"]]]],[11,"is_empty","","Returns `true` if this `Name` has a length of zero.",91,[[["self"]],["bool"]]],[11,"len","","Returns the length of this `Name`, in bytes.",91,[[["self"]],["usize"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",92,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",92,[[["self"]],["option",["usize"]]]],[11,"new","","Creates a new empty `String`.",93,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",93,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",93,[[["vec",["u8"]]],["result",["string","fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid…",93,N],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`,…",93,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`,…",93,N],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",93,N],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking…",93,[[["vec",["u8"]]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",93,[[["self"]],["vec",["u8"]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",93,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",93,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",93,N],[11,"capacity","","Returns this `String`'s capacity, in bytes.",93,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least…",93,N],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional`…",93,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",93,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",93,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",93,N],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",93,N],[11,"push","","Appends the given [`char`] to the end of this `String`.",93,N],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",93,N],[11,"truncate","","Shortens this `String` to the specified length.",93,N],[11,"pop","","Removes the last character from the string buffer and…",93,[[["self"]],["option",["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position…",93,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",93,N],[11,"insert","","Inserts a character into this `String` at a byte position.",93,N],[11,"insert_str","","Inserts a string slice into this `String` at a byte…",93,N],[11,"as_mut_vec","","Returns a mutable reference to the contents of this…",93,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes.",93,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",93,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",93,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",93,N],[11,"drain","","Creates a draining iterator that removes the specified…",93,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it…",93,N],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",93,[[["self"]],["box",["str"]]]],[11,"new","astral::core","Initialize the core system from the given [`Engine`].",94,[[["engine"]],["system"]]],[11,"logger","","Returns the logger of this core system.",94,[[["self"]],["logger"]]],[11,"new","astral::third_party::walkdir","Create a builder for a recursive directory iterator…",95,[[["p"]],["walkdir"]]],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",95,[[["self"],["usize"]],["walkdir"]]],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",95,[[["self"],["usize"]],["walkdir"]]],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",95,[[["self"],["bool"]],["walkdir"]]],[11,"max_open","","Set the maximum number of simultaneously open file…",95,[[["self"],["usize"]],["walkdir"]]],[11,"sort_by","","Set a function for sorting directory entries.",95,[[["self"],["f"]],["walkdir"]]],[11,"contents_first","","Yield a directory's contents before the directory itself.…",95,[[["self"],["bool"]],["walkdir"]]],[11,"same_file_system","","Do not cross file system boundaries.",95,[[["self"],["bool"]],["walkdir"]]],[11,"skip_current_dir","","Skips the current directory.",96,N],[11,"filter_entry","","Yields only entries which satisfy the given predicate and…",96,[[["self"],["p"]],["filterentry",["intoiter"]]]],[11,"path","","The full path that this entry represents.",97,[[["self"]],["path"]]],[11,"into_path","","The full path that this entry represents.",97,[[["self"]],["pathbuf"]]],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from…",97,[[["self"]],["bool"]]],[11,"metadata","","Return the metadata for the file that this entry points to.",97,[[["self"]],["result",["metadata","error"]]]],[11,"file_type","","Return the file type for the file that this entry points to.",97,[[["self"]],["filetype"]]],[11,"file_name","","Return the file name of this entry.",97,[[["self"]],["osstr"]]],[11,"depth","","Returns the depth at which this entry was created relative…",97,[[["self"]],["usize"]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and…",98,[[["self"],["p"]],["filterentry",["filterentry"]]]],[11,"skip_current_dir","","Skips the current directory.",98,N],[11,"path","","Returns the path associated with this error if one exists.",99,[[["self"]],["option",["path"]]]],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",99,[[["self"]],["option",["path"]]]],[11,"depth","","Returns the depth at which this error occurred relative to…",99,[[["self"]],["usize"]]],[11,"io_error","","Inspect the original [`io::Error`] if there is one.",99,[[["self"]],["option",["error"]]]],[11,"into_io_error","","Similar to [`io_error`] except consumes self to convert to…",99,[[["self"]],["option",["error"]]]],[11,"root","astral::third_party::slog","Build a root `Logger`",100,[[["d"],["ownedkv"]],["logger",["arc"]]]],[11,"root_typed","","Build a root `Logger` that retains `drain` type",100,[[["d"],["ownedkv"]],["logger"]]],[11,"new","","Build a child logger",100,[[["self"],["ownedkv"]],["logger"]]],[11,"log","","Log one logging `Record`",100,N],[11,"list","","Get list of key-value pairs assigned to this `Logger`",100,[[["self"]],["ownedkvlist"]]],[11,"into_erased","","Convert to default, \"erased\" type:…",100,[[["self"]],["logger",["arc"]]]],[11,"to_erased","","Create a copy with \"erased\" type",100,[[["self"]],["logger",["arc"]]]],[11,"new","","Create `Filter` wrapping given `drain`",40,[[["d"],["f"]],["filter"]]],[11,"new","","Create `LevelFilter`",41,[[["d"],["level"]],["levelfilter"]]],[11,"new","","Create `Filter` wrapping given `drain`",102,[[["d"],["f"]],["maperror"]]],[11,"new","","Create `Duplicate`",42,[[["d1"],["d2"]],["duplicate"]]],[11,"new","","Create `Fuse` wrapping given `drain`",43,[[["d"]],["fuse"]]],[11,"new","","Create `IgnoreResult` wrapping `drain`",103,[[["d"]],["ignoreresult"]]],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",45,[[["self"]],["str"]]],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",45,[[["self"]],["str"]]],[11,"as_usize","","Cast `Level` to ordering integer",45,[[["self"]],["usize"]]],[11,"from_usize","","Get a `Level` from an `usize`",45,[[["usize"]],["option",["level"]]]],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",45,[[["self"],["level"]],["bool"]]],[11,"as_usize","","Convert to `usize` value",46,[[["self"]],["usize"]]],[11,"from_usize","","Get a `FilterLevel` from an `usize`",46,[[["usize"]],["option",["filterlevel"]]]],[11,"max","","Maximum logging level (log everything)",46,[[],["filterlevel"]]],[11,"min","","Minimum logging level (log nothing)",46,[[],["filterlevel"]]],[11,"new","","Create a new `Record`",105,[[["recordstatic"],["arguments"],["borrowedkv"]],["record"]]],[11,"msg","","Get a log record message",105,[[["self"]],["arguments"]]],[11,"level","","Get record logging level",105,[[["self"]],["level"]]],[11,"line","","Get line number",105,[[["self"]],["u32"]]],[11,"location","","Get line number",105,[[["self"]],["recordlocation"]]],[11,"column","","Get error column",105,[[["self"]],["u32"]]],[11,"file","","Get file path",105,[[["self"]],["str"]]],[11,"tag","","Get tag",105,[[["self"]],["str"]]],[11,"module","","Get module",105,[[["self"]],["str"]]],[11,"function","","Get function (placeholder)",105,[[["self"]],["str"]]],[11,"kv","","Get key-value pairs",105,[[["self"]],["borrowedkv"]]],[11,"serialize","","Emit a value",106,[[["self"],["s"]],["result",["error"]]]],[11,"emit","","Emit a value",106,[[["self"],["s"]],["result",["error"]]]],[11,"new","astral::third_party::serde::de::value","Create a new borrowed deserializer from the given string.",129,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte…",132,N],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",133,[[["i"]],["seqdeserializer"]]],[11,"end","","Check for remaining elements after passing a…",133,[[["self"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",134,[[["a"]],["seqaccessdeserializer"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",135,[[["i"]],["mapdeserializer"]]],[11,"end","","Check for remaining elements after passing a…",135,[[["self"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",136,[[["a"]],["mapaccessdeserializer"]]],[11,"new","astral","Initialize the engine with the given [`Logger`].",139,[[["logger"]],["engine"]]],[11,"logger","","Returns the logger of this engine.",139,[[["self"]],["logger"]]],[11,"new","astral::resource::assets","Construct a new empty `Namespace`.",140,[[],["namespace"]]],[11,"with_capacity","","Construct a new, empty `Namespace` with the specified…",140,[[["usize"],["usize"]],["namespace"]]],[11,"virtual_file_systems","","Returns the number of [`VirtualFileSystem`]s in the…",140,[[["self"]],["usize"]]],[11,"files","","Returns the number of files in the `Namespace`.",140,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `Namespace` contains no…",140,[[["self"]],["bool"]]],[11,"add_virtual_file_system","","Adds a new [`VirtualFileSystem`] and returns its…",140,[[["self"],["impl into<box<dyn virtualfilesystem<'str, h> + 'vfs>>"]],["result",["virtualfilesystemindex","error"]]]],[11,"remove_virtual_file_system","","Removes a [`VirtualFileSystem`] by its index, which where…",140,[[["self"],["virtualfilesystemindex"]],["option",["box"]]]],[11,"clear","","Removes all [`VirtualFileSystem`]s from the `Namespace`.",140,N],[11,"reload","","Reloads the [`VirtualFileSystem`] at the given index and…",140,[[["self"],["virtualfilesystemindex"]],["result",["error"]]]],[11,"iter","","Returns an [`Iterator`] over all [`VirtualFileSystem`]s in…",140,N],[11,"create","","Opens a file in write-only mode at the given…",140,[[["self"],["name"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"create_new","","Creates a file in write-only mode at the given…",140,[[["self"],["name"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"exists","","Returns whether the `Namespace` is aware of the file and…",140,[[["self"],["name"]],["bool"]]],[11,"modified","","Returns the last modification time of the file if the…",140,[[["self"],["name"]],["option",["result"]]]],[11,"open","","Opens the file in read-only mode. Returns [`None`], if the…",140,[[["self"],["name"]],["option",["result"]]]],[11,"remove","","Remove the file. Returns [`Some`]`(`[`Result`]`<()>)`, if…",140,[[["self"],["name"]],["option",["result"]]]],[11,"new","","Construct a new `FileSystem` at the specified root path.…",141,[[["p"],["subsystem"],["subsystem"]],["result",["filesystem","error"]]]],[11,"test","","test func",141,[[],["filesystem"]]],[11,"new","","Initialize the asset subsystem from the given [resource…",142,[[["system"]],["subsystem"]]],[11,"logger","","Returns the logger of this asset subsystem.",142,[[["self"]],["logger"]]],[11,"new","","Construct a new empty `Catalog`.",144,[[],["catalog"]]],[11,"with_capacity","","Construct a new, empty `Catalog` with the specified…",144,[[["usize"]],["catalog"]]],[11,"len","","Returns the number of [`Namespace`]s in the `Catalog`.",144,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `Catalog` contains no [`Namespace`]s.",144,[[["self"]],["bool"]]],[11,"add_namespace","","Adds a new [`Namespace`] and returns its [`NamespaceId`]…",144,[[["self"],["namespace"]],["namespaceid"]]],[11,"get_namespace","","Returns the [`Namespace`] as reference of the given…",144,[[["self"],["namespaceid"]],["option",["namespace"]]]],[11,"get_namespace_mut","","Returns the [`Namespace`] as mutable reference of the…",144,[[["self"],["namespaceid"]],["option",["namespace"]]]],[11,"remove_namespace","","Removes the [`Namespace`] of the given [`NamespaceId`] and…",144,[[["self"],["namespaceid"]],["option",["namespace"]]]],[11,"contains_namespace","","Returns `true` if the [`Namespace`] of the given…",144,[[["self"],["namespaceid"]],["bool"]]],[11,"iter_namespaces","","Returns an [`Iterator`] over all [`NamespaceId`]s and…",144,N],[11,"create","","Opens a file in write-only mode at the given…",144,[[["self"],["location"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"create_new","","Opens a file in write-only mode at the given…",144,[[["self"],["location"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"exists","","Returns whether the `Catalog` is aware of the file and the…",144,[[["self"],["location"]],["bool"]]],[11,"modified","","Returns the last modification time of the file if the…",144,[[["self"],["location"]],["option",["result"]]]],[11,"open","","Opens the file in read-only mode. Returns [`None`], if the…",144,[[["self"],["location"]],["option",["result"]]]],[11,"remove","","Remove the file. Returns [`Some`]`(`[`Result`]`<()>)`, if…",144,[[["self"],["location"]],["option",["result"]]]],[11,"new","","Construct a `Location` from a [`NamespaceId`] and a…",79,[[["namespaceid"],["name"]],["location"]]],[11,"from_string","","Construct a `Location` from a [`NamespaceId`] and a…",79,[[["namespaceid"],["s"]],["location"]]],[11,"new","astral::resource","Initialize the resource system from the given [`Engine`].",146,[[["engine"]],["system"]]],[11,"logger","","Returns the logger of this resource system.",146,[[["self"]],["logger"]]],[11,"new","","",147,[[],["declaration"]]],[11,"with_priority","","",147,[[["u32"]],["declaration"]]],[11,"completed","","",147,[[["self"]],["bool"]]],[11,"canceled","","",147,[[["self"]],["bool"]]],[11,"loading","","",147,[[["self"]],["bool"]]],[11,"active","","",147,[[["self"]],["bool"]]],[11,"stalled","","",147,[[["self"]],["bool"]]],[11,"released","","",147,[[["self"]],["bool"]]],[11,"cancel","","",147,N],[11,"release","","",147,N],[11,"stall","","",147,N],[11,"start_stalled","","",147,N],[11,"new","astral::video","Initialize the video system from the given [`Engine`].",148,[[["engine"]],["system"]]],[11,"logger","","Returns the logger of this video system.",148,[[["self"]],["logger"]]]],"paths":[[8,"OptionExt"],[8,"ResultExt"],[8,"Zero"],[8,"WrappingSub"],[8,"Bounded"],[8,"NumCast"],[8,"One"],[8,"PrimUnsignedInt"],[8,"Saturating"],[8,"WrappingMul"],[8,"WrappingShr"],[8,"Num"],[8,"NonZero"],[8,"PrimInt"],[8,"AsPrimitive"],[8,"WrappingShl"],[8,"WrappingAdd"],[8,"Signed"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Pow"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"DirEntryExt"],[8,"Drain"],[3,"Filter"],[3,"LevelFilter"],[3,"Duplicate"],[3,"Fuse"],[4,"MutexDrainError"],[4,"Level"],[4,"FilterLevel"],[8,"Serializer"],[8,"Value"],[3,"FnValue"],[3,"PushFnValue"],[8,"KV"],[3,"SingleKV"],[4,"Error"],[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[8,"__Deref"],[4,"ErrorKind"],[8,"VirtualFileSystem"],[3,"Location"],[4,"ErrorKind"],[8,"Resource"],[3,"Key"],[3,"SparseSlotMap"],[3,"Error"],[3,"Murmur3"],[3,"NopHasher"],[3,"Utf16Error"],[3,"Subsystem"],[3,"Text"],[3,"StringId"],[3,"Name"],[3,"Utf8Error"],[3,"String"],[3,"System"],[3,"WalkDir"],[3,"IntoIter"],[3,"DirEntry"],[3,"FilterEntry"],[3,"Error"],[3,"Logger"],[3,"Discard"],[3,"MapError"],[3,"IgnoreResult"],[3,"RecordStatic"],[3,"Record"],[3,"PushFnValueSerializer"],[3,"OwnedKV"],[3,"BorrowedKV"],[3,"OwnedKVList"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[3,"Impossible"],[3,"Engine"],[3,"Namespace"],[3,"FileSystem"],[3,"Subsystem"],[3,"VirtualFileSystemIndex"],[3,"Catalog"],[3,"NamespaceId"],[3,"System"],[3,"Declaration"],[3,"System"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
