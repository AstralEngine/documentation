var N = null;var searchIndex = {};
searchIndex["astral"]={"doc":"","items":[[0,"core","astral","Low-level support systems for manage mundane but crucial tasks.",N,N],[0,"collections","astral::core","Collection types.",N,N],[0,"slot_map","astral::core::collections","Container with persistent unique keys.",N,N],[3,"Key","astral::core::collections::slot_map","Used to access stored values in a slot map.",N,N],[3,"SparseSlotMap","","A storage with stable unique keys.",N,N],[0,"error","astral::core","Traits and structures for working with Errors in the Astral Engine.",N,N],[3,"Error","astral::core::error","The generic error type for the Astral engine.",N,N],[6,"Result","","A specialized [`Result`] type in the Astral Engine.",N,N],[8,"OptionExt","","Extension methods for [`Option`].",N,N],[10,"ok_or_error","","Transforms the [`Option<T>`] into a [`Result<T, Error<Kind>>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(Error::new(kind, context))`].",0,[[["self"],["kind"],["context"]],["result",["error"]]]],[10,"ok_or_error_with","","Transforms the [`Option<T>`] into a [`Result<T, Error<Kind>>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(Error::new(kind, context))`] by applying the provided closure `FnOnce() -> impl Into<Box<dyn error::Error + Send + Sync>>`.",0,[[["self"],["kind"],["f"]],["result",["error"]]]],[8,"ResultExt","","Extension methods for [`Result`].",N,N],[10,"context","","Associates the error with an error kind.",1,[[["self"],["kind"]],["result",["error"]]]],[10,"chain","","Creates a new [`Error`], associates it with an error kind and sets the old error as source.",1,[[["self"],["kind"],["context"]],["result",["error"]]]],[10,"chain_with","","Creates a new [`Error`], associates it with an error kind and sets the old error as source by applying the provided closure `FnOnce() -> impl Into<Box<dyn error::Error + Send + Sync>>`.",1,[[["self"],["kind"],["f"]],["result",["error"]]]],[0,"hash","astral::core","Hashing utilities and hashers.",N,N],[3,"NopHasher","astral::core::hash","An implementation of [`Hasher`] hasher which only accepts values with a size of 8 bytes or an integral value fitting into 8 bytes.",N,N],[3,"Murmur3","","An implementation of the [Murmur3 Hash].",N,N],[0,"log","astral::core","Structures and macros for logging.",N,N],[3,"MetadataBuilder","astral::core::log","Builder for `Metadata`.",N,N],[3,"TerminalLogger","","Provides a stderr/out based Logger implementation.",N,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",2,N],[13,"Error","","Corresponds to the `Error` log level.",2,N],[13,"Warn","","Corresponds to the `Warn` log level.",2,N],[13,"Info","","Corresponds to the `Info` log level.",2,N],[13,"Debug","","Corresponds to the `Debug` log level.",2,N],[13,"Trace","","Corresponds to the `Trace` log level.",2,N],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",N,[[["box",["log"]]],["result",["setloggererror"]]]],[14,"error","","Logs a message at the error level.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",3,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",3,N],[10,"flush","","Flushes any buffered records.",3,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[14,"debug","","Logs a message at the debug level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[3,"Record","","The \"payload\" of a log message.",N,N],[14,"log","","The standard logging macro.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[5,"set_max_level","","Sets the global maximum log level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",4,N],[13,"Warn","","The \"warn\" level.",4,N],[13,"Info","","The \"info\" level.",4,N],[13,"Debug","","The \"debug\" level.",4,N],[13,"Trace","","The \"trace\" level.",4,N],[14,"warn","","Logs a message at the warn level.",N,N],[0,"math","astral::core","Traits, structures and functions for mathematical and numeric problems.",N,N],[0,"num","astral::core::math","Additional functionality for numerics.",N,N],[8,"WrappingShr","astral::core::math::num","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",5,[[["self"],["u32"]],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",6,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",6,[[["self"]],["bool"]]],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",7,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",7,[[],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",8,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",8,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",8,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",8,[[["self"]],["bool"]]],[8,"NonZero","","Functions for primitive type, which has a non-zero correspondant.",N,N],[16,"Int","","",9,N],[10,"new_unchecked","","Create a non-zero without checking the value.",9,N],[10,"new","","Create a non-zero if the given value is not zero.",9,N],[10,"get","","Returns the value as the primitive type.",9,N],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",10,[[["t"]],["option"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",11,[[["self"]],["bool"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",13,[[["self"],["u32"]],["self"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",14,[[["self"]],["t"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",15,[[["self"],["self"]],["self"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"PrimUnsignedInt","","Functions for primitive unsigned integral types.",N,N],[16,"NonZero","","The [`NonZero`] part for this type.",16,N],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",17,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",17,[[["str"],["u32"]],["result"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",18,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",18,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",19,[[["self"],["self"]],["self"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"string","astral::core","Structures for holding strings.",N,N],[17,"MAX_STRINGS","astral::core::string","The maximum number of unique strings like [`Text`] or [`Name`].",N,N],[5,"allocated_strings","","Returns the number of unique allocated strings.",N,[[],["usize"]]],[5,"used_memory","","Returns the memory, which is used for the string API.",N,[[],["usize"]]],[5,"used_memory_chunks","","Returns the number of chunks used for the string API.",N,[[],["usize"]]],[3,"Utf16Error","","A possible error value when converting a [`Name`] or [`Text`] from a UTF-16 byte slice.",N,N],[17,"MAX_STRING_LENGTH","","The maximum length of one string like  [`Text`] or [`Name`].",N,N],[3,"Text","","A UTF-8 encoded, immutable string.",N,N],[3,"String","","A UTF-8 encoded, growable string.",N,N],[3,"Name","","A UTF-8 encoded, immutable string optimized for numeric suffixes.",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[0,"resource","astral","Support systems for creating and loading different resources.",N,N],[0,"assets","astral::resource","Functionality to manage asset data.",N,N],[3,"Location","astral::resource::assets","A `Location` consists of a [`NamespaceId`] and a [`Name`].",N,N],[12,"namespace_id","","",21,N],[12,"name","","",21,N],[3,"VirtualFileSystemIndex","","An index to access a [`VirtualFileSystem`] inside of a [`Namespace`].",N,N],[3,"NamespaceId","","An index to access a [`Namespace`] inside of a [`Catalog`].",N,N],[6,"Error","","A specialized Error type with an asset [`ErrorKind`].",N,N],[3,"Namespace","","A `Namespace` contains multiple, various [`VirtualFileSystem`]s.",N,N],[3,"FileSystem","","A `FileSystem` is a view into the systems file system.",N,N],[6,"Result","","The type returned from asset methods.",N,N],[8,"VirtualFileSystem","","A virtual file system is an abstraction to a concrete file system with which you can read, write and create files.",N,N],[10,"name","","Returns the [`Name`] of the file system.",22,[[["self"]],["name"]]],[10,"readonly","","Returns if the file system is read-only.",22,[[["self"]],["bool"]]],[10,"iter","","Returns an [`Iterator`] over all files in the file system.",22,[[["self"]],["result",["box","error"]]]],[10,"create","","Opens a file in write-only mode.",22,[[["self"],["name"]],["result",["box","error"]]]],[10,"create_new","","Creates a file in write-only mode.",22,[[["self"],["name"]],["result",["box","error"]]]],[10,"exists","","Returns whether the path points at an existing entity.",22,[[["self"],["name"]],["bool"]]],[10,"modified","","Returns the last modification time at this entity.",22,[[["self"],["name"]],["result",["systemtime","error"]]]],[10,"open","","Attempts to open a file in read-only mode.",22,[[["self"],["name"]],["result",["box","error"]]]],[10,"remove","","Removes a file from the filesystem.",22,[[["self"],["name"]],["result",["error"]]]],[4,"ErrorKind","","A list specifying general categories of assets error.",N,N],[13,"Io","","An I/O operation failed.",23,N],[13,"InvalidIndex","","The passed index is not valid.",23,N],[13,"Other","","Any assets error not part of this list.",23,N],[3,"Catalog","","A collection of [`Namespace`]s.",N,N],[4,"State","astral::resource","The current state of a resource",N,N],[13,"Unknown","","The resource is not known to the registry.",24,N],[13,"Declared","","The registry knows how to load the resource.",24,N],[13,"Loading","","The resource is loading.",24,N],[13,"Loaded","","The resource is loaded and ready to be used.",24,N],[13,"LoadedWithError","","The resource is loaded, but an error occurred during loading.",24,N],[6,"Error","","",N,N],[8,"Resource","","",N,N],[16,"LoadData","","",25,N],[3,"Loader","","",N,N],[6,"Result","","",N,N],[3,"ResourceId","","",N,N],[6,"LoadPriority","","",N,N],[3,"Declaration","","",N,N],[8,"LoadData","","",N,N],[4,"ErrorKind","","A list specifying general categories of resource error.",N,N],[13,"Loading","","A resource could not be loaded.",26,N],[11,"into","astral::core::collections::slot_map","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into_iter","","",28,[[["self"]],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","astral::core::error","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into","astral::core::hash","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","astral::core::log","",32,[[["self"]],["u"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","astral::core::string","",39,[[["self"]],["u"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into","astral::resource::assets","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"into","astral::resource","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"as_ref","astral::core::string","",41,[[["self"]],["path"]]],[11,"as_ref","","",41,[[["self"]],["osstr"]]],[11,"to_socket_addrs","","",41,[[["self"]],["result",["intoiter","error"]]]],[11,"cmp","","",41,[[["self"],["string"]],["ordering"]]],[11,"write_str","","",41,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",41,[[["self"],["char"]],["result",["error"]]]],[11,"extend","","",41,N],[11,"extend","","",41,N],[11,"extend","","",41,N],[11,"extend","","",41,N],[11,"extend","","",41,N],[11,"clone","","",41,[[["self"]],["string"]]],[11,"clone_from","","",41,N],[11,"deref","","",41,[[["self"]],["str"]]],[11,"index_mut","","",41,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","","",41,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",41,[[["self"],["range",["usize"]]],["str"]]],[11,"index_mut","","",41,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",41,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index_mut","","",41,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"from_str","","",41,[[["str"]],["result",["string","parseerror"]]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"default","","Creates an empty `String`.",41,[[],["string"]]],[11,"from_iter","","",41,[[["i"]],["string"]]],[11,"from_iter","","",41,[[["i"]],["string"]]],[11,"from_iter","","",41,[[["i"]],["string"]]],[11,"from_iter","","",41,[[["i"]],["string"]]],[11,"from_iter","","",41,[[["i"]],["string"]]],[11,"as_ref","","",41,N],[11,"as_ref","","",41,[[["self"]],["str"]]],[11,"index","","",41,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",41,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","","",41,[[["self"],["rangefull"]],["str"]]],[11,"index","","",41,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",41,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","","",41,[[["self"],["range",["usize"]]],["str"]]],[11,"hash","","",41,N],[11,"borrow","","",41,[[["self"]],["str"]]],[11,"add_assign","","",41,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",41,[[["self"],["str"]],["bool"]]],[11,"ne","","",41,[[["self"],["str"]],["bool"]]],[11,"eq","","",41,[[["self"],["str"]],["bool"]]],[11,"ne","","",41,[[["self"],["str"]],["bool"]]],[11,"eq","","",41,[[["self"],["string"]],["bool"]]],[11,"ne","","",41,[[["self"],["string"]],["bool"]]],[11,"eq","","",41,[[["self"],["cow"]],["bool"]]],[11,"ne","","",41,[[["self"],["cow"]],["bool"]]],[11,"from","","Converts the given boxed `str` slice to a `String`. It is notable that the `str` slice is owned.",41,[[["box",["str"]]],["string"]]],[11,"from","","",41,[[["cow",["str"]]],["string"]]],[11,"from","","",41,[[["str"]],["string"]]],[11,"add","","",41,[[["self"],["str"]],["string"]]],[11,"partial_cmp","","",41,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",41,[[["self"],["string"]],["bool"]]],[11,"le","","",41,[[["self"],["string"]],["bool"]]],[11,"gt","","",41,[[["self"],["string"]],["bool"]]],[11,"ge","","",41,[[["self"],["string"]],["bool"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref_mut","","",41,[[["self"]],["str"]]],[11,"finish","astral::core::hash","",31,[[["self"]],["u64"]]],[11,"write","","",31,N],[11,"finish","","",30,[[["self"]],["u64"]]],[11,"write","","",30,N],[11,"write_u8","","",30,N],[11,"write_u16","","",30,N],[11,"write_u32","","",30,N],[11,"write_usize","","",30,N],[11,"write_i8","","",30,N],[11,"write_i16","","",30,N],[11,"write_i32","","",30,N],[11,"write_isize","","",30,N],[11,"from","astral::core::string","",40,[[["cow",["str"]]],["text"]]],[11,"from","","",42,[[["text"]],["name"]]],[11,"from","","",41,[[["name"]],["string"]]],[11,"from","","",42,[[["string"]],["name"]]],[11,"from","","",42,[[["cow",["str"]]],["name"]]],[11,"from","","",41,[[["text"]],["string"]]],[11,"from","","",40,[[["str"]],["text"]]],[11,"from","","",40,[[["name"]],["text"]]],[11,"from","","",40,[[["string"]],["text"]]],[11,"from","astral::core::error","",29,[[["kind"]],["error"]]],[11,"from","astral::core::string","",42,[[["str"]],["name"]]],[11,"index_mut","astral::core::collections::slot_map","",28,N],[11,"from_str","astral::core::string","",42,[[["str"]],["result",["name","parseerror"]]]],[11,"from_str","","",40,[[["str"]],["result",["text","parseerror"]]]],[11,"eq","","",42,[[["self"],["str"]],["bool"]]],[11,"eq","","",43,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",43,[[["self"],["utf8error"]],["bool"]]],[11,"eq","","",42,[[["self"],["name"]],["bool"]]],[11,"ne","","",42,[[["self"],["name"]],["bool"]]],[11,"eq","","",41,[[["self"],["text"]],["bool"]]],[11,"eq","astral::core::collections::slot_map","",27,[[["self"],["key"]],["bool"]]],[11,"ne","","",27,[[["self"],["key"]],["bool"]]],[11,"eq","astral::core::string","",42,[[["self"],["text"]],["bool"]]],[11,"eq","","",42,[[["self"],["string"]],["bool"]]],[11,"eq","","",40,[[["self"],["cow"]],["bool"]]],[11,"eq","","",42,[[["self"],["str"]],["bool"]]],[11,"eq","","",40,[[["self"],["str"]],["bool"]]],[11,"eq","","",40,[[["self"],["name"]],["bool"]]],[11,"eq","","",40,[[["self"],["string"]],["bool"]]],[11,"eq","","",40,[[["self"],["text"]],["bool"]]],[11,"ne","","",40,[[["self"],["text"]],["bool"]]],[11,"eq","","",42,[[["self"],["cow"]],["bool"]]],[11,"eq","","",40,[[["self"],["str"]],["bool"]]],[11,"eq","","",41,[[["self"],["name"]],["bool"]]],[11,"deref","","",40,N],[11,"clone","","",43,[[["self"]],["utf8error"]]],[11,"clone","","",42,[[["self"]],["name"]]],[11,"clone","astral::core::collections::slot_map","",27,[[["self"]],["key"]]],[11,"clone","astral::core::hash","",30,[[["self"]],["nophasher"]]],[11,"clone","astral::core::string","",40,[[["self"]],["text"]]],[11,"clone","astral::core::hash","",31,[[["self"]],["murmur3"]]],[11,"extend","astral::core::string","",41,N],[11,"extend","","",41,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::error","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","astral::core::string","",42,[[["self"],["name"]],["ordering"]]],[11,"cmp","","",40,[[["self"],["text"]],["ordering"]]],[11,"source","astral::core::error","",29,[[["self"]],["option",["error"]]]],[11,"borrow","astral::core::string","",40,[[["self"]],["str"]]],[11,"into_iter","astral::core::collections::slot_map","",28,N],[11,"hash","","",27,N],[11,"hash","astral::core::string","",42,N],[11,"hash","","",40,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::hash","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::error","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::collections::slot_map","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::string","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::core::collections::slot_map","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"index","astral::core::string","",40,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",40,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","","",40,[[["self"],["range",["usize"]]],["str"]]],[11,"index","astral::core::collections::slot_map","",28,N],[11,"index","astral::core::string","",40,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",40,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","","",40,[[["self"],["rangefull"]],["str"]]],[11,"as_ref","","",40,[[["self"]],["path"]]],[11,"as_ref","","",40,N],[11,"as_ref","","",40,[[["self"]],["osstr"]]],[11,"as_ref","","",40,[[["self"]],["str"]]],[11,"from_iter","","",40,[[["i"]],["text"]]],[11,"from_iter","","",42,[[["i"]],["name"]]],[11,"from_iter","","",40,[[["i"]],["text"]]],[11,"from_iter","","",42,[[["i"]],["name"]]],[11,"from_iter","","",42,[[["i"]],["name"]]],[11,"from_iter","","",40,[[["i"]],["text"]]],[11,"from_iter","","",42,[[["i"]],["name"]]],[11,"from_iter","","",42,[[["i"]],["name"]]],[11,"from_iter","","",42,[[["i"]],["name"]]],[11,"from_iter","","",40,[[["i"]],["text"]]],[11,"from_iter","","",40,[[["i"]],["text"]]],[11,"from_iter","","",40,[[["i"]],["text"]]],[11,"partial_cmp","","",42,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["cow"]],["option",["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["name"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",41,[[["self"],["name"]],["option",["ordering"]]]],[11,"partial_cmp","","",41,[[["self"],["text"]],["option",["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["text"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["name"]],["option",["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["cow"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["text"]],["option",["ordering"]]]],[11,"default","","",42,[[],["name"]]],[11,"default","astral::core::hash","",30,[[],["nophasher"]]],[11,"default","astral::core::log","",33,[[],["terminallogger"]]],[11,"default","astral::core::collections::slot_map","",28,[[],["slotmap"]]],[11,"default","astral::core::hash","",31,[[],["murmur3"]]],[11,"default","astral::core::string","",40,[[],["text"]]],[11,"enabled","astral::core::log","",33,[[["self"],["metadata"]],["bool"]]],[11,"log","","",33,N],[11,"flush","","",33,N],[11,"hash","","",34,N],[11,"hash","","",2,N],[11,"hash","","",4,N],[11,"hash","","",32,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",4,[[["str"]],["result",["level"]]]],[11,"from_str","","",2,[[["str"]],["result",["levelfilter"]]]],[11,"eq","","",34,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",34,[[["self"],["metadata"]],["bool"]]],[11,"eq","","",32,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",32,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","","",4,[[["self"],["level"]],["bool"]]],[11,"eq","","",2,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",35,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",35,[[["self"],["parselevelerror"]],["bool"]]],[11,"eq","","",2,[[["self"],["level"]],["bool"]]],[11,"clone","","",4,[[["self"]],["level"]]],[11,"clone","","",34,[[["self"]],["metadata"]]],[11,"clone","","",38,[[["self"]],["record"]]],[11,"clone","","",2,[[["self"]],["levelfilter"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",2,[[["self"],["levelfilter"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",32,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"cmp","","",34,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",34,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["metadata"]],["bool"]]],[11,"le","","",34,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",34,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",34,[[["self"],["metadata"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",32,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",32,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",32,[[["self"],["metadatabuilder"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["level"]],["bool"]]],[11,"le","","",2,[[["self"],["level"]],["bool"]]],[11,"gt","","",2,[[["self"],["level"]],["bool"]]],[11,"ge","","",2,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["level"]],["bool"]]],[11,"le","","",4,[[["self"],["level"]],["bool"]]],[11,"gt","","",4,[[["self"],["level"]],["bool"]]],[11,"ge","","",4,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",2,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",2,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",2,[[["self"],["levelfilter"]],["bool"]]],[11,"description","","",35,[[["self"]],["str"]]],[11,"description","","",36,[[["self"]],["str"]]],[11,"hash","astral::resource::assets","",44,N],[11,"hash","","",45,N],[11,"hash","","",23,N],[11,"hash","astral::resource","",26,N],[11,"hash","astral::resource::assets","",21,N],[11,"hash","astral::resource","",50,N],[11,"index_mut","astral::resource::assets","",48,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource::assets","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource::assets","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource::assets","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"index","","",48,N],[11,"eq","","",21,[[["self"],["location"]],["bool"]]],[11,"ne","","",21,[[["self"],["location"]],["bool"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"eq","astral::resource","",50,[[["self"],["resourceid"]],["bool"]]],[11,"ne","","",50,[[["self"],["resourceid"]],["bool"]]],[11,"eq","","",26,[[["self"],["errorkind"]],["bool"]]],[11,"eq","astral::resource::assets","",45,[[["self"],["namespaceid"]],["bool"]]],[11,"ne","","",45,[[["self"],["namespaceid"]],["bool"]]],[11,"eq","","",44,[[["self"],["virtualfilesystemindex"]],["bool"]]],[11,"ne","","",44,[[["self"],["virtualfilesystemindex"]],["bool"]]],[11,"eq","astral::resource","",24,[[["self"],["state"]],["bool"]]],[11,"clone","astral::resource::assets","",21,[[["self"]],["location"]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"clone","","",44,[[["self"]],["virtualfilesystemindex"]]],[11,"clone","astral::resource","",24,[[["self"]],["state"]]],[11,"clone","","",50,[[["self"]],["resourceid"]]],[11,"clone","","",26,[[["self"]],["errorkind"]]],[11,"clone","astral::resource::assets","",45,[[["self"]],["namespaceid"]]],[11,"deserialize","","",47,[[["__d"]],["result",["filesystem"]]]],[11,"serialize","","",47,[[["self"],["__s"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","astral::resource","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",24,[[["self"],["state"]],["ordering"]]],[11,"cmp","astral::resource::assets","",23,[[["self"],["errorkind"]],["ordering"]]],[11,"cmp","astral::resource","",26,[[["self"],["errorkind"]],["ordering"]]],[11,"name","astral::resource::assets","",47,[[["self"]],["name"]]],[11,"readonly","","",47,[[["self"]],["bool"]]],[11,"iter","","",47,[[["self"]],["result",["box","error"]]]],[11,"create","","",47,[[["self"],["name"]],["result",["box","error"]]]],[11,"create_new","","",47,[[["self"],["name"]],["result",["box","error"]]]],[11,"exists","","",47,[[["self"],["name"]],["bool"]]],[11,"modified","","",47,[[["self"],["name"]],["result",["systemtime","error"]]]],[11,"open","","",47,[[["self"],["name"]],["result",["box","error"]]]],[11,"remove","","",47,[[["self"],["name"]],["result",["error"]]]],[11,"partial_cmp","astral::resource","",24,[[["self"],["state"]],["option",["ordering"]]]],[11,"partial_cmp","astral::resource::assets","",23,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"partial_cmp","astral::resource","",26,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"default","astral::resource::assets","",46,[[],["namespace"]]],[11,"default","","",48,[[],["catalog"]]],[11,"default","astral::resource","",51,[[],["declaration"]]],[11,"deserialize","astral::core::string","",41,[[["d"]],["result",["string"]]]],[11,"deserialize_in_place","","",41,[[["d"],["string"]],["result"]]],[11,"serialize","","",41,[[["self"],["s"]],["result"]]],[11,"into_deserializer","","",41,[[["self"]],["stringdeserializer"]]],[11,"new","astral::core::collections::slot_map","Construct a new, empty `SparseSlotMap`.",28,[[],["slotmap"]]],[11,"with_capacity","","Construct a new, empty `SparseSlotMap` with the specified capacity.",28,[[["usize"]],["slotmap"]]],[11,"capacity","","Returns the number of elements the slot map can hold without reallocating.",28,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given slot map. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",28,N],[11,"len","","Returns the number of elements in the slot map, also referred to as its 'length'.",28,[[["self"]],["idx"]]],[11,"is_empty","","Returns `true` if the slot map contains no elements.",28,[[["self"]],["bool"]]],[11,"create_key","","Creates a new key which can be used later.",28,[[["self"]],["key"]]],[11,"contains_key","","Returns if a key is stored in the map.",28,[[["self"],["key"]],["bool"]]],[11,"insert","","Inserts a value into the map returning the key.",28,[[["self"],["t"]],["key"]]],[11,"insert_with_key","","Inserts a value at the given position. The key has to be created with `create_key`. It returns the previously stored value if any.",28,[[["self"],["key"],["t"]],["result",["option"]]]],[11,"remove","","Removes the value at the given key",28,[[["self"],["key"]],["option"]]],[11,"clear","","Clears the slot map. Keeps the allocated memory for reuse.",28,N],[11,"retain","","Retains only the elements specified by the predicate.",28,N],[11,"get","","Returns a reference to the value corresponding to the key.",28,[[["self"],["key"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",28,[[["self"],["key"]],["option"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(Key, &'a T)`.",28,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(Key, &'a mut T)`.",28,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `Key`.",28,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a T`.",28,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut T`.",28,[[["self"]],["valuesmut"]]],[11,"drain","","Creates a draining iterator that yields the removed items.",28,[[["self"]],["drain"]]],[11,"drain_filter","","Clears the slot map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",28,[[["self"],["f"]],["drainfilter"]]],[11,"new","astral::core::error","Creates a new error from a known kind of error as well as an arbitrary error payload. The `error` argument is an arbitrary payload which will be contained in this `Error`. The resulting error don't have a source error returned by [`Error::source`].",29,[[["kind"],["e"]],["error"]]],[11,"chained","","Creates a new error from a known kind of error as well as an arbitrary error payload and keeps another payload as source error.",29,[[["kind"],["e"],["s"]],["error"]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",29,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",29,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",29,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `Kind` for this error.",29,[[["self"]],["kind"]]],[11,"new","astral::core::log","Construct a new `MetadataBuilder`.",32,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",32,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",32,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",32,[[["self"]],["metadata"]]],[11,"new","","Creates a new `TerminalLogger`",33,[[],["terminallogger"]]],[11,"max","","Returns the most verbose logging level filter.",2,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",2,[[["self"]],["option",["level"]]]],[11,"builder","","Returns a new builder.",34,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",34,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",34,[[["self"]],["str"]]],[11,"new","","Construct new `RecordBuilder`.",37,[[],["recordbuilder"]]],[11,"args","","Set `args`.",37,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",37,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",37,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",37,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",37,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",37,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",37,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",37,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",38,[[],["recordbuilder"]]],[11,"args","","The message body.",38,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",38,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",38,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",38,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",38,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",38,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",38,[[["self"]],["option",["u32"]]]],[11,"max","","Returns the most verbose logging level.",4,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",4,[[["self"]],["levelfilter"]]],[11,"from_utf8","astral::core::string","Converts a slice of bytes to a `Text`.",40,N],[11,"from_utf8_lossy","","Converts a slice of bytes to a `Text`, including invalid characters.",40,N],[11,"from_utf8_unchecked","","Converts a slice of bytes to a `Text` without checking that the string contains valid UTF-8.",40,N],[11,"from_utf16","","Decode a UTF-16 encoded slice into a `Text`, returning [`Err`] if the slice contains any invalid data.",40,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice into a `Text`, replacing invalid data with [the replacement character (`U+FFFD`)][U+FFFD].",40,N],[11,"as_str","","Extracts a string slice containing the entire `Text`.",40,[[["self"]],["str"]]],[11,"is_empty","","Returns `true` if this `Text` has a length of zero.",40,[[["self"]],["bool"]]],[11,"len","","Returns the length of this `Text`, in bytes.",40,[[["self"]],["usize"]]],[11,"new","","Creates a new empty `String`.",41,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",41,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",41,[[["vec",["u8"]]],["result",["string","fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",41,N],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",41,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with [the replacement character (`U+FFFD`)][U+FFFD].",41,N],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",41,N],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",41,[[["vec",["u8"]]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",41,[[["self"]],["vec",["u8"]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",41,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",41,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",41,N],[11,"capacity","","Returns this `String`'s capacity, in bytes.",41,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",41,N],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",41,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `String`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",41,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `String`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",41,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",41,N],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",41,N],[11,"push","","Appends the given [`char`] to the end of this `String`.",41,N],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",41,N],[11,"truncate","","Shortens this `String` to the specified length.",41,N],[11,"pop","","Removes the last character from the string buffer and returns it.",41,[[["self"]],["option",["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",41,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",41,N],[11,"insert","","Inserts a character into this `String` at a byte position.",41,N],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",41,N],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",41,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes.",41,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",41,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",41,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",41,N],[11,"drain","","Creates a draining iterator that removes the specified range in the `String` and yields the removed `chars`.",41,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",41,N],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",41,[[["self"]],["box",["str"]]]],[11,"as_str","","Returns the string as [`Cow`]`<'static,`[`str`]`>`.",42,[[["self"]],["cow",["str"]]]],[11,"from_utf8","","Converts a slice of bytes to a `Name`.",42,N],[11,"from_utf8_lossy","","Converts a slice of bytes to a `Name`, including invalid characters.",42,N],[11,"from_utf8_unchecked","","Converts a slice of bytes to a `Name` without checking that the string contains valid UTF-8.",42,N],[11,"from_utf16","","Decode a UTF-16 encoded slice into a `Name`, returning [`Err`] if the slice contains any invalid data.",42,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice into a `Name`, replacing invalid data with [the replacement character (`U+FFFD`)][U+FFFD].",42,N],[11,"is_empty","","Returns `true` if this `Name` has a length of zero.",42,[[["self"]],["bool"]]],[11,"len","","Returns the length of this `Name`, in bytes.",42,[[["self"]],["usize"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",43,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",43,[[["self"]],["option",["usize"]]]],[11,"new","astral::resource::assets","Construct a `Location` from a [`NamespaceId`] and a [`Name`].",21,[[["namespaceid"],["name"]],["location"]]],[11,"from_string","","Construct a `Location` from a [`NamespaceId`] and a string, which can be converted into a name [`Name`].",21,[[["namespaceid"],["s"]],["location"]]],[11,"new","","Construct a new empty `Namespace`.",46,[[],["namespace"]]],[11,"with_capacity","","Construct a new, empty `Namespace` with the specified capacity.",46,[[["usize"],["usize"]],["namespace"]]],[11,"virtual_file_systems","","Returns the number of [`VirtualFileSystem`]s in the `Namespace`.",46,[[["self"]],["usize"]]],[11,"files","","Returns the number of files in the `Namespace`.",46,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `Namespace` contains no [`VirtualFileSystem`]s or no files.",46,[[["self"]],["bool"]]],[11,"add_virtual_file_system","","Adds a new [`VirtualFileSystem`] and returns its [`VirtualFileSystemIndex`] to query it at a later time.",46,[[["self"],["impl into<box<dyn virtualfilesystem + 'loc>>"]],["result",["virtualfilesystemindex","error"]]]],[11,"remove_virtual_file_system","","Removes a [`VirtualFileSystem`] by its index, which where returned by [`add_virtual_file_system`]. Returns the file system if any.",46,[[["self"],["virtualfilesystemindex"]],["option",["box"]]]],[11,"clear","","Removes all [`VirtualFileSystem`]s from the `Namespace`.",46,N],[11,"reload","","Reloads the [`VirtualFileSystem`] at the given index and updates the internal cache. This may take some time.",46,[[["self"],["virtualfilesystemindex"]],["result",["error"]]]],[11,"iter","","Returns an [`Iterator`] over all [`VirtualFileSystem`]s in the `Namespace`.",46,N],[11,"create","","Opens a file in write-only mode at the given [`VirtualFileSystem`].",46,[[["self"],["name"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"create_new","","Creates a file in write-only mode at the given [`VirtualFileSystem`].",46,[[["self"],["name"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"exists","","Returns whether the `Namespace` is aware of the file and the entity exists.",46,[[["self"],["name"]],["bool"]]],[11,"modified","","Returns the last modification time of the file if the `Namespace` is aware of it.",46,[[["self"],["name"]],["option",["result"]]]],[11,"open","","Opens the file in read-only mode. Returns [`None`], if the `Namespace` is not aware of it.",46,[[["self"],["name"]],["option",["result"]]]],[11,"remove","","Remove the file. Returns [`Some`]`(`[`Result`]`<()>)`, if the `Namespace` is aware of the file. [`Result`] determines if the removal was successful. Returns [`None`] otherwise",46,[[["self"],["name"]],["option",["result"]]]],[11,"new","","Construct a new `FileSystem` at the specified root path. If wished, the file system can search files in a recursive manner.",47,[[["p"],["bool"]],["result",["filesystem","error"]]]],[11,"test","","test func",47,[[],["filesystem"]]],[11,"new","","Construct a new empty `Catalog`.",48,[[],["catalog"]]],[11,"with_capacity","","Construct a new, empty `Catalog` with the specified capacity.",48,[[["usize"]],["catalog"]]],[11,"len","","Returns the number of [`Namespace`]s in the `Catalog`.",48,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `Catalog` contains no [`Namespace`]s.",48,[[["self"]],["bool"]]],[11,"add_namespace","","Adds a new [`Namespace`] and returns its [`NamespaceId`] to query it at a later time.",48,[[["self"],["namespace"]],["namespaceid"]]],[11,"get_namespace","","Returns the [`Namespace`] as reference of the given [`NamespaceId`] if any or [`None`].",48,[[["self"],["namespaceid"]],["option",["namespace"]]]],[11,"get_namespace_mut","","Returns the [`Namespace`] as mutable reference of the given [`NamespaceId`] if any or [`None`].",48,[[["self"],["namespaceid"]],["option",["namespace"]]]],[11,"remove_namespace","","Removes the [`Namespace`] of the given [`NamespaceId`] and returns it.",48,[[["self"],["namespaceid"]],["option",["namespace"]]]],[11,"contains_namespace","","Returns `true` if the [`Namespace`] of the given [`NamespaceId`] exists.",48,[[["self"],["namespaceid"]],["bool"]]],[11,"iter_namespaces","","Returns an [`Iterator`] over all [`NamespaceId`]s and [`Namespace`]s in the `Catalog`.",48,N],[11,"create","","Opens a file in write-only mode at the given [`VirtualFileSystem`].",48,[[["self"],["location"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"create_new","","Opens a file in write-only mode at the given [`VirtualFileSystem`].",48,[[["self"],["location"],["option",["virtualfilesystemindex"]]],["option",["result"]]]],[11,"exists","","Returns whether the `Catalog` is aware of the file and the entity exists.",48,[[["self"],["location"]],["bool"]]],[11,"modified","","Returns the last modification time of the file if the `Catalog` is aware of it.",48,[[["self"],["location"]],["option",["result"]]]],[11,"open","","Opens the file in read-only mode. Returns [`None`], if the `Catalog` is not aware of it.",48,[[["self"],["location"]],["option",["result"]]]],[11,"remove","","Remove the file. Returns [`Some`]`(`[`Result`]`<()>)`, if the `Catalog` is aware of the file. [`Result`] determines if the removal was successful. Returns [`None`] otherwise",48,[[["self"],["location"]],["option",["result"]]]],[11,"new","astral::resource","",49,[[["f1"],["f2"]],["loader"]]],[11,"set_catalog","","",49,[[["self"],["c"]],["option",["arc"]]]],[11,"catalog","","",49,[[["self"]],["option",["arc"]]]],[11,"declare_resource","","",49,[[["self"],["name"]],["resourceid"]]],[11,"declare_resource_with_loader","","",49,[[["self"],["name"],["f"]],["resourceid"]]],[11,"declare_asset","","",49,[[["self"],["location"]],["resourceid"]]],[11,"declare_asset_with_loader","","",49,[[["self"],["location"],["f"]],["resourceid"]]],[11,"load","","",49,[[["self"],["resourceid"],["p"]],["result",["error"]]]],[11,"clear","","",49,N],[11,"location","","",50,[[["self"]],["option",["location"]]]],[11,"name","","",50,[[["self"]],["name"]]],[11,"new","","",51,[[],["declaration"]]],[11,"with_priority","","",51,[[["u32"]],["declaration"]]],[11,"completed","","",51,[[["self"]],["bool"]]],[11,"canceled","","",51,[[["self"]],["bool"]]],[11,"loading","","",51,[[["self"]],["bool"]]],[11,"active","","",51,[[["self"]],["bool"]]],[11,"stalled","","",51,[[["self"]],["bool"]]],[11,"released","","",51,[[["self"]],["bool"]]],[11,"cancel","","",51,N],[11,"release","","",51,N],[11,"stall","","",51,N],[11,"start_stalled","","",51,N]],"paths":[[8,"OptionExt"],[8,"ResultExt"],[4,"LevelFilter"],[8,"Log"],[4,"Level"],[8,"WrappingShr"],[8,"Zero"],[8,"Bounded"],[8,"Signed"],[8,"NonZero"],[8,"NumCast"],[8,"One"],[8,"WrappingSub"],[8,"WrappingShl"],[8,"AsPrimitive"],[8,"WrappingAdd"],[8,"PrimUnsignedInt"],[8,"Num"],[8,"Saturating"],[8,"WrappingMul"],[8,"PrimInt"],[3,"Location"],[8,"VirtualFileSystem"],[4,"ErrorKind"],[4,"State"],[8,"Resource"],[4,"ErrorKind"],[3,"Key"],[3,"SparseSlotMap"],[3,"Error"],[3,"NopHasher"],[3,"Murmur3"],[3,"MetadataBuilder"],[3,"TerminalLogger"],[3,"Metadata"],[3,"ParseLevelError"],[3,"SetLoggerError"],[3,"RecordBuilder"],[3,"Record"],[3,"Utf16Error"],[3,"Text"],[3,"String"],[3,"Name"],[3,"Utf8Error"],[3,"VirtualFileSystemIndex"],[3,"NamespaceId"],[3,"Namespace"],[3,"FileSystem"],[3,"Catalog"],[3,"Loader"],[3,"ResourceId"],[3,"Declaration"]]};
initSearch(searchIndex);
